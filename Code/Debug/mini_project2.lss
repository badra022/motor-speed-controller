
mini_project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001754  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001754  000017e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800068  00800068  000017f0  2**0
                  ALLOC
  3 .stab         00002814  00000000  00000000  000017f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001886  00000000  00000000  00004004  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000588a  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000589c  2**2
                  CONTENTS, READONLY
  7 .debug_info   0000052e  00000000  00000000  000058d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004e7  00000000  00000000  00005e06  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000062ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001af  00000000  00000000  00006307  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a1 04 	jmp	0x942	; 0x942 <__vector_1>
       8:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 c9 02 	jmp	0x592	; 0x592 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <__vector_18>
      4c:	0c 94 a4 01 	jmp	0x348	; 0x348 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a8 e6       	ldi	r26, 0x68	; 104
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 37       	cpi	r26, 0x78	; 120
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
      8a:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_speedConversion>:
/*********************************************************************************
* 								MAIN APPLICATION										 *
 *********************************************************************************/
uint8 speed = 0;
void ADC_speedConversion(void)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	speed = ((1023 - current_reading)/1023)*255;
      9a:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <current_reading>
      9e:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <current_reading+0x1>
      a2:	2f ef       	ldi	r18, 0xFF	; 255
      a4:	33 e0       	ldi	r19, 0x03	; 3
      a6:	a9 01       	movw	r20, r18
      a8:	48 1b       	sub	r20, r24
      aa:	59 0b       	sbc	r21, r25
      ac:	ca 01       	movw	r24, r20
      ae:	2f ef       	ldi	r18, 0xFF	; 255
      b0:	33 e0       	ldi	r19, 0x03	; 3
      b2:	b9 01       	movw	r22, r18
      b4:	0e 94 39 0a 	call	0x1472	; 0x1472 <__udivmodhi4>
      b8:	cb 01       	movw	r24, r22
      ba:	81 95       	neg	r24
      bc:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
}
      c0:	00 00       	nop
      c2:	df 91       	pop	r29
      c4:	cf 91       	pop	r28
      c6:	08 95       	ret

000000c8 <main>:
/*void setSpeed(void)
{
	TIMER0_setCompareValue(speed);
}*/
int main(void)
{
      c8:	cf 93       	push	r28
      ca:	df 93       	push	r29
      cc:	cd b7       	in	r28, 0x3d	; 61
      ce:	de b7       	in	r29, 0x3e	; 62
      d0:	2a 97       	sbiw	r28, 0x0a	; 10
      d2:	0f b6       	in	r0, 0x3f	; 63
      d4:	f8 94       	cli
      d6:	de bf       	out	0x3e, r29	; 62
      d8:	0f be       	out	0x3f, r0	; 63
      da:	cd bf       	out	0x3d, r28	; 61
	/*initialization code*/
	INT1_init(INT1_FALLING , PULLUP);
      dc:	61 e0       	ldi	r22, 0x01	; 1
      de:	82 e0       	ldi	r24, 0x02	; 2
      e0:	0e 94 c4 03 	call	0x788	; 0x788 <INT1_init>
		 * 4. compare interrupt
		 * 5. overflow interrupt
		 * 6. compare value
		 * 7. initial value
		 */
	TIMER0_config_struct T0_config = { FAST_PWM , CLEAR_OUTPUT , T0_F_CPU , ENABLE
      e4:	27 e0       	ldi	r18, 0x07	; 7
      e6:	e0 e6       	ldi	r30, 0x60	; 96
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	ce 01       	movw	r24, r28
      ec:	01 96       	adiw	r24, 0x01	; 1
      ee:	dc 01       	movw	r26, r24
      f0:	01 90       	ld	r0, Z+
      f2:	0d 92       	st	X+, r0
      f4:	2a 95       	dec	r18
      f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x28>
			 , ENABLE , 100 , 0};
	TIMER0_init(&T0_config);
      f8:	ce 01       	movw	r24, r28
      fa:	01 96       	adiw	r24, 0x01	; 1
      fc:	0e 94 dd 00 	call	0x1ba	; 0x1ba <TIMER0_init>
	LCD_init();
     100:	0e 94 46 05 	call	0xa8c	; 0xa8c <LCD_init>
	 * type :  ADC_config_struct
	 * 1. reference voltage (AREF , AVCC , _2_56V )
	 * 2. POLLING or INTERRUPT
	 * 3. pre-scaler (ADC_F_CPU_2_2 , ADC_F_CPU_2,4,8,16,32,64,128)
	 */
	ADC_config_struct ADC_config = {AREF , INTERRUPT , ADC_F_CPU_8 };
     104:	18 86       	std	Y+8, r1	; 0x08
     106:	81 e0       	ldi	r24, 0x01	; 1
     108:	89 87       	std	Y+9, r24	; 0x09
     10a:	83 e0       	ldi	r24, 0x03	; 3
     10c:	8a 87       	std	Y+10, r24	; 0x0a
	ADC_init(&ADC_config);
     10e:	ce 01       	movw	r24, r28
     110:	08 96       	adiw	r24, 0x08	; 8
     112:	0e 94 12 02 	call	0x424	; 0x424 <ADC_init>
	INT1_setCallBack(DCMOTOR_toggleMove);
     116:	8b e4       	ldi	r24, 0x4B	; 75
     118:	93 e0       	ldi	r25, 0x03	; 3
     11a:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <INT1_setCallBack>
	ADC_setCallBack(ADC_speedConversion);
     11e:	89 e4       	ldi	r24, 0x49	; 73
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	0e 94 b6 02 	call	0x56c	; 0x56c <ADC_setCallBack>
	//LCD_displayString("ADC value= ");
	DCMOTOR_init();
     126:	0e 94 09 03 	call	0x612	; 0x612 <DCMOTOR_init>
	DCMOTOR_move();
     12a:	0e 94 31 03 	call	0x662	; 0x662 <DCMOTOR_move>
	GLOBAL_INTERRUPT_ENABLE();
     12e:	8f e5       	ldi	r24, 0x5F	; 95
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	2f e5       	ldi	r18, 0x5F	; 95
     134:	30 e0       	ldi	r19, 0x00	; 0
     136:	f9 01       	movw	r30, r18
     138:	20 81       	ld	r18, Z
     13a:	20 68       	ori	r18, 0x80	; 128
     13c:	fc 01       	movw	r30, r24
     13e:	20 83       	st	Z, r18
	//TIMER0_setCallBackCompareMode(setSpeed);
	/*super loop*/
	while(TRUE)
	{
		/*Application code*/
		ADC_readChannel(&ADC_config , ADC0);
     140:	ce 01       	movw	r24, r28
     142:	08 96       	adiw	r24, 0x08	; 8
     144:	60 e0       	ldi	r22, 0x00	; 0
     146:	0e 94 62 02 	call	0x4c4	; 0x4c4 <ADC_readChannel>
		LCD_goToColRow(0 , 0);
     14a:	60 e0       	ldi	r22, 0x00	; 0
     14c:	80 e0       	ldi	r24, 0x00	; 0
     14e:	0e 94 bc 09 	call	0x1378	; 0x1378 <LCD_goToColRow>
		LCD_displayInt(current_reading);
     152:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <current_reading>
     156:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <current_reading+0x1>
     15a:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <LCD_displayInt>
		T0_config.compare_value = speed;
     15e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
     162:	8e 83       	std	Y+6, r24	; 0x06
		TIMER0_init(&T0_config);
     164:	ce 01       	movw	r24, r28
     166:	01 96       	adiw	r24, 0x01	; 1
     168:	0e 94 dd 00 	call	0x1ba	; 0x1ba <TIMER0_init>
	}
     16c:	e9 cf       	rjmp	.-46     	; 0x140 <main+0x78>

0000016e <TIMER0_setCallBackCompareMode>:
uint8 g_t0tick = 0;
/*********************************************************************************
* 									Functions Definition						 *
 *********************************************************************************/
void TIMER0_setCallBackCompareMode(void (*a_ptr)(void))
{
     16e:	cf 93       	push	r28
     170:	df 93       	push	r29
     172:	00 d0       	rcall	.+0      	; 0x174 <TIMER0_setCallBackCompareMode+0x6>
     174:	cd b7       	in	r28, 0x3d	; 61
     176:	de b7       	in	r29, 0x3e	; 62
     178:	9a 83       	std	Y+2, r25	; 0x02
     17a:	89 83       	std	Y+1, r24	; 0x01
	g_T0CompareInterruptFunc_ptr = a_ptr;
     17c:	89 81       	ldd	r24, Y+1	; 0x01
     17e:	9a 81       	ldd	r25, Y+2	; 0x02
     180:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <g_T0CompareInterruptFunc_ptr+0x1>
     184:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <g_T0CompareInterruptFunc_ptr>
}
     188:	00 00       	nop
     18a:	0f 90       	pop	r0
     18c:	0f 90       	pop	r0
     18e:	df 91       	pop	r29
     190:	cf 91       	pop	r28
     192:	08 95       	ret

00000194 <TIMER0_setCallBackOverflowMode>:
void TIMER0_setCallBackOverflowMode(void (*a_ptr)(void))
{
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	00 d0       	rcall	.+0      	; 0x19a <TIMER0_setCallBackOverflowMode+0x6>
     19a:	cd b7       	in	r28, 0x3d	; 61
     19c:	de b7       	in	r29, 0x3e	; 62
     19e:	9a 83       	std	Y+2, r25	; 0x02
     1a0:	89 83       	std	Y+1, r24	; 0x01
	g_T0OverflowInterruptFunc_ptr = a_ptr;
     1a2:	89 81       	ldd	r24, Y+1	; 0x01
     1a4:	9a 81       	ldd	r25, Y+2	; 0x02
     1a6:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <g_T0OverflowInterruptFunc_ptr+0x1>
     1aa:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <g_T0OverflowInterruptFunc_ptr>
}
     1ae:	00 00       	nop
     1b0:	0f 90       	pop	r0
     1b2:	0f 90       	pop	r0
     1b4:	df 91       	pop	r29
     1b6:	cf 91       	pop	r28
     1b8:	08 95       	ret

000001ba <TIMER0_init>:
void TIMER0_init(const TIMER0_config_struct * config_ptr)
{
     1ba:	cf 93       	push	r28
     1bc:	df 93       	push	r29
     1be:	00 d0       	rcall	.+0      	; 0x1c0 <TIMER0_init+0x6>
     1c0:	cd b7       	in	r28, 0x3d	; 61
     1c2:	de b7       	in	r29, 0x3e	; 62
     1c4:	9a 83       	std	Y+2, r25	; 0x02
     1c6:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 = 0;
     1c8:	83 e5       	ldi	r24, 0x53	; 83
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	fc 01       	movw	r30, r24
     1ce:	10 82       	st	Z, r1
	TCCR0 = config_ptr->mode;
     1d0:	83 e5       	ldi	r24, 0x53	; 83
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	29 81       	ldd	r18, Y+1	; 0x01
     1d6:	3a 81       	ldd	r19, Y+2	; 0x02
     1d8:	f9 01       	movw	r30, r18
     1da:	20 81       	ld	r18, Z
     1dc:	fc 01       	movw	r30, r24
     1de:	20 83       	st	Z, r18
	if(config_ptr->mode == NORMAL || config_ptr->mode == CTC)
     1e0:	89 81       	ldd	r24, Y+1	; 0x01
     1e2:	9a 81       	ldd	r25, Y+2	; 0x02
     1e4:	fc 01       	movw	r30, r24
     1e6:	80 81       	ld	r24, Z
     1e8:	88 23       	and	r24, r24
     1ea:	31 f0       	breq	.+12     	; 0x1f8 <TIMER0_init+0x3e>
     1ec:	89 81       	ldd	r24, Y+1	; 0x01
     1ee:	9a 81       	ldd	r25, Y+2	; 0x02
     1f0:	fc 01       	movw	r30, r24
     1f2:	80 81       	ld	r24, Z
     1f4:	88 30       	cpi	r24, 0x08	; 8
     1f6:	51 f4       	brne	.+20     	; 0x20c <TIMER0_init+0x52>
	{
		SET_BIT(TCCR0 , FOC0);
     1f8:	83 e5       	ldi	r24, 0x53	; 83
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	23 e5       	ldi	r18, 0x53	; 83
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	f9 01       	movw	r30, r18
     202:	20 81       	ld	r18, Z
     204:	20 68       	ori	r18, 0x80	; 128
     206:	fc 01       	movw	r30, r24
     208:	20 83       	st	Z, r18
     20a:	09 c0       	rjmp	.+18     	; 0x21e <TIMER0_init+0x64>
	}
	else
	{
		CLEAR_BIT(TCCR0 , FOC0);
     20c:	83 e5       	ldi	r24, 0x53	; 83
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	23 e5       	ldi	r18, 0x53	; 83
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	f9 01       	movw	r30, r18
     216:	20 81       	ld	r18, Z
     218:	2f 77       	andi	r18, 0x7F	; 127
     21a:	fc 01       	movw	r30, r24
     21c:	20 83       	st	Z, r18
	}
	TCCR0 |= ((config_ptr->output_mode) << 4) | (config_ptr->clock);
     21e:	83 e5       	ldi	r24, 0x53	; 83
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	23 e5       	ldi	r18, 0x53	; 83
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	f9 01       	movw	r30, r18
     228:	20 81       	ld	r18, Z
     22a:	42 2f       	mov	r20, r18
     22c:	29 81       	ldd	r18, Y+1	; 0x01
     22e:	3a 81       	ldd	r19, Y+2	; 0x02
     230:	f9 01       	movw	r30, r18
     232:	21 81       	ldd	r18, Z+1	; 0x01
     234:	22 2f       	mov	r18, r18
     236:	30 e0       	ldi	r19, 0x00	; 0
     238:	22 95       	swap	r18
     23a:	32 95       	swap	r19
     23c:	30 7f       	andi	r19, 0xF0	; 240
     23e:	32 27       	eor	r19, r18
     240:	20 7f       	andi	r18, 0xF0	; 240
     242:	32 27       	eor	r19, r18
     244:	52 2f       	mov	r21, r18
     246:	29 81       	ldd	r18, Y+1	; 0x01
     248:	3a 81       	ldd	r19, Y+2	; 0x02
     24a:	f9 01       	movw	r30, r18
     24c:	22 81       	ldd	r18, Z+2	; 0x02
     24e:	25 2b       	or	r18, r21
     250:	24 2b       	or	r18, r20
     252:	fc 01       	movw	r30, r24
     254:	20 83       	st	Z, r18
	TCNT0 = config_ptr->initial_value;
     256:	82 e5       	ldi	r24, 0x52	; 82
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	29 81       	ldd	r18, Y+1	; 0x01
     25c:	3a 81       	ldd	r19, Y+2	; 0x02
     25e:	f9 01       	movw	r30, r18
     260:	26 81       	ldd	r18, Z+6	; 0x06
     262:	fc 01       	movw	r30, r24
     264:	20 83       	st	Z, r18
	OCR0 = config_ptr->compare_value;
     266:	8c e5       	ldi	r24, 0x5C	; 92
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	29 81       	ldd	r18, Y+1	; 0x01
     26c:	3a 81       	ldd	r19, Y+2	; 0x02
     26e:	f9 01       	movw	r30, r18
     270:	25 81       	ldd	r18, Z+5	; 0x05
     272:	fc 01       	movw	r30, r24
     274:	20 83       	st	Z, r18
	if(config_ptr->output_mode != NORMAL_OUTPUT )
     276:	89 81       	ldd	r24, Y+1	; 0x01
     278:	9a 81       	ldd	r25, Y+2	; 0x02
     27a:	fc 01       	movw	r30, r24
     27c:	81 81       	ldd	r24, Z+1	; 0x01
     27e:	88 23       	and	r24, r24
     280:	91 f0       	breq	.+36     	; 0x2a6 <TIMER0_init+0xec>
	{
		SET_BIT(DDRB , 3);
     282:	87 e3       	ldi	r24, 0x37	; 55
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	27 e3       	ldi	r18, 0x37	; 55
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	f9 01       	movw	r30, r18
     28c:	20 81       	ld	r18, Z
     28e:	28 60       	ori	r18, 0x08	; 8
     290:	fc 01       	movw	r30, r24
     292:	20 83       	st	Z, r18
		CLEAR_BIT(PORTB , 3);
     294:	88 e3       	ldi	r24, 0x38	; 56
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	28 e3       	ldi	r18, 0x38	; 56
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	f9 01       	movw	r30, r18
     29e:	20 81       	ld	r18, Z
     2a0:	27 7f       	andi	r18, 0xF7	; 247
     2a2:	fc 01       	movw	r30, r24
     2a4:	20 83       	st	Z, r18
	}
	TIMSK |= config_ptr->overflow_interrupt | ((config_ptr->compare_interrupt)<<OCIE0);
     2a6:	89 e5       	ldi	r24, 0x59	; 89
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	29 e5       	ldi	r18, 0x59	; 89
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	f9 01       	movw	r30, r18
     2b0:	20 81       	ld	r18, Z
     2b2:	42 2f       	mov	r20, r18
     2b4:	29 81       	ldd	r18, Y+1	; 0x01
     2b6:	3a 81       	ldd	r19, Y+2	; 0x02
     2b8:	f9 01       	movw	r30, r18
     2ba:	24 81       	ldd	r18, Z+4	; 0x04
     2bc:	52 2f       	mov	r21, r18
     2be:	29 81       	ldd	r18, Y+1	; 0x01
     2c0:	3a 81       	ldd	r19, Y+2	; 0x02
     2c2:	f9 01       	movw	r30, r18
     2c4:	23 81       	ldd	r18, Z+3	; 0x03
     2c6:	22 2f       	mov	r18, r18
     2c8:	30 e0       	ldi	r19, 0x00	; 0
     2ca:	22 0f       	add	r18, r18
     2cc:	33 1f       	adc	r19, r19
     2ce:	25 2b       	or	r18, r21
     2d0:	24 2b       	or	r18, r20
     2d2:	fc 01       	movw	r30, r24
     2d4:	20 83       	st	Z, r18
}
     2d6:	00 00       	nop
     2d8:	0f 90       	pop	r0
     2da:	0f 90       	pop	r0
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	08 95       	ret

000002e2 <TIMER0_setCompareValue>:
void TIMER0_setCompareValue(uint8 value)
{
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	1f 92       	push	r1
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
     2ec:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = value;
     2ee:	8c e5       	ldi	r24, 0x5C	; 92
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	29 81       	ldd	r18, Y+1	; 0x01
     2f4:	fc 01       	movw	r30, r24
     2f6:	20 83       	st	Z, r18
}
     2f8:	00 00       	nop
     2fa:	0f 90       	pop	r0
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	08 95       	ret

00000302 <TIMER0_stop>:
void TIMER0_stop(void)
{
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	cd b7       	in	r28, 0x3d	; 61
     308:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR0 , 0);
     30a:	83 e5       	ldi	r24, 0x53	; 83
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	23 e5       	ldi	r18, 0x53	; 83
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	f9 01       	movw	r30, r18
     314:	20 81       	ld	r18, Z
     316:	2e 7f       	andi	r18, 0xFE	; 254
     318:	fc 01       	movw	r30, r24
     31a:	20 83       	st	Z, r18
	CLEAR_BIT(TCCR0 , 1);
     31c:	83 e5       	ldi	r24, 0x53	; 83
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	23 e5       	ldi	r18, 0x53	; 83
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	f9 01       	movw	r30, r18
     326:	20 81       	ld	r18, Z
     328:	2d 7f       	andi	r18, 0xFD	; 253
     32a:	fc 01       	movw	r30, r24
     32c:	20 83       	st	Z, r18
	CLEAR_BIT(TCCR0 , 2);
     32e:	83 e5       	ldi	r24, 0x53	; 83
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	23 e5       	ldi	r18, 0x53	; 83
     334:	30 e0       	ldi	r19, 0x00	; 0
     336:	f9 01       	movw	r30, r18
     338:	20 81       	ld	r18, Z
     33a:	2b 7f       	andi	r18, 0xFB	; 251
     33c:	fc 01       	movw	r30, r24
     33e:	20 83       	st	Z, r18
}
     340:	00 00       	nop
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	08 95       	ret

00000348 <__vector_19>:
/*********************************************************************************
* 								Interrupt service routines							 *
 *********************************************************************************/
ISR(TIMER0_COMP_vect)
{
     348:	1f 92       	push	r1
     34a:	0f 92       	push	r0
     34c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     350:	0f 92       	push	r0
     352:	11 24       	eor	r1, r1
     354:	2f 93       	push	r18
     356:	3f 93       	push	r19
     358:	4f 93       	push	r20
     35a:	5f 93       	push	r21
     35c:	6f 93       	push	r22
     35e:	7f 93       	push	r23
     360:	8f 93       	push	r24
     362:	9f 93       	push	r25
     364:	af 93       	push	r26
     366:	bf 93       	push	r27
     368:	ef 93       	push	r30
     36a:	ff 93       	push	r31
     36c:	cf 93       	push	r28
     36e:	df 93       	push	r29
     370:	cd b7       	in	r28, 0x3d	; 61
     372:	de b7       	in	r29, 0x3e	; 62
	if(g_T0CompareInterruptFunc_ptr != NULL)
     374:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <g_T0CompareInterruptFunc_ptr>
     378:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <g_T0CompareInterruptFunc_ptr+0x1>
     37c:	89 2b       	or	r24, r25
     37e:	31 f0       	breq	.+12     	; 0x38c <__vector_19+0x44>
	{
		g_T0CompareInterruptFunc_ptr();
     380:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <g_T0CompareInterruptFunc_ptr>
     384:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <g_T0CompareInterruptFunc_ptr+0x1>
     388:	fc 01       	movw	r30, r24
     38a:	09 95       	icall
	}
}
     38c:	00 00       	nop
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	ff 91       	pop	r31
     394:	ef 91       	pop	r30
     396:	bf 91       	pop	r27
     398:	af 91       	pop	r26
     39a:	9f 91       	pop	r25
     39c:	8f 91       	pop	r24
     39e:	7f 91       	pop	r23
     3a0:	6f 91       	pop	r22
     3a2:	5f 91       	pop	r21
     3a4:	4f 91       	pop	r20
     3a6:	3f 91       	pop	r19
     3a8:	2f 91       	pop	r18
     3aa:	0f 90       	pop	r0
     3ac:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     3b0:	0f 90       	pop	r0
     3b2:	1f 90       	pop	r1
     3b4:	18 95       	reti

000003b6 <__vector_9>:
ISR(TIMER0_OVF_vect)
{
     3b6:	1f 92       	push	r1
     3b8:	0f 92       	push	r0
     3ba:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     3be:	0f 92       	push	r0
     3c0:	11 24       	eor	r1, r1
     3c2:	2f 93       	push	r18
     3c4:	3f 93       	push	r19
     3c6:	4f 93       	push	r20
     3c8:	5f 93       	push	r21
     3ca:	6f 93       	push	r22
     3cc:	7f 93       	push	r23
     3ce:	8f 93       	push	r24
     3d0:	9f 93       	push	r25
     3d2:	af 93       	push	r26
     3d4:	bf 93       	push	r27
     3d6:	ef 93       	push	r30
     3d8:	ff 93       	push	r31
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
	if(g_T0OverflowInterruptFunc_ptr != NULL)
     3e2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <g_T0OverflowInterruptFunc_ptr>
     3e6:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <g_T0OverflowInterruptFunc_ptr+0x1>
     3ea:	89 2b       	or	r24, r25
     3ec:	31 f0       	breq	.+12     	; 0x3fa <__vector_9+0x44>
	{
		g_T0OverflowInterruptFunc_ptr();
     3ee:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <g_T0OverflowInterruptFunc_ptr>
     3f2:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <g_T0OverflowInterruptFunc_ptr+0x1>
     3f6:	fc 01       	movw	r30, r24
     3f8:	09 95       	icall
	}
}
     3fa:	00 00       	nop
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	ff 91       	pop	r31
     402:	ef 91       	pop	r30
     404:	bf 91       	pop	r27
     406:	af 91       	pop	r26
     408:	9f 91       	pop	r25
     40a:	8f 91       	pop	r24
     40c:	7f 91       	pop	r23
     40e:	6f 91       	pop	r22
     410:	5f 91       	pop	r21
     412:	4f 91       	pop	r20
     414:	3f 91       	pop	r19
     416:	2f 91       	pop	r18
     418:	0f 90       	pop	r0
     41a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     41e:	0f 90       	pop	r0
     420:	1f 90       	pop	r1
     422:	18 95       	reti

00000424 <ADC_init>:
volatile uint16 current_reading;
/*********************************************************************************
* 								Functions Definition							 *
 *********************************************************************************/
void ADC_init(const ADC_config_struct * config_ptr)
{
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	00 d0       	rcall	.+0      	; 0x42a <ADC_init+0x6>
     42a:	cd b7       	in	r28, 0x3d	; 61
     42c:	de b7       	in	r29, 0x3e	; 62
     42e:	9a 83       	std	Y+2, r25	; 0x02
     430:	89 83       	std	Y+1, r24	; 0x01
	/* setting initially
	 * 1. ADC0 channel
	 * 2. reference voltage
	 * 3. no left adjust for result
	 */
	ADMUX = (config_ptr->ref)<<6;
     432:	87 e2       	ldi	r24, 0x27	; 39
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	29 81       	ldd	r18, Y+1	; 0x01
     438:	3a 81       	ldd	r19, Y+2	; 0x02
     43a:	f9 01       	movw	r30, r18
     43c:	20 81       	ld	r18, Z
     43e:	22 95       	swap	r18
     440:	22 0f       	add	r18, r18
     442:	22 0f       	add	r18, r18
     444:	20 7c       	andi	r18, 0xC0	; 192
     446:	fc 01       	movw	r30, r24
     448:	20 83       	st	Z, r18
	/*
	 * enable adc
	 * */
	SET_BIT(ADCSRA , ADEN);
     44a:	86 e2       	ldi	r24, 0x26	; 38
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	26 e2       	ldi	r18, 0x26	; 38
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	f9 01       	movw	r30, r18
     454:	20 81       	ld	r18, Z
     456:	20 68       	ori	r18, 0x80	; 128
     458:	fc 01       	movw	r30, r24
     45a:	20 83       	st	Z, r18
	/*
	 * setting ADIE with either 0 for polling or 1 for interrupt
	 * */
	SET_VALUE(ADCSRA , ADIE , config_ptr->type);
     45c:	86 e2       	ldi	r24, 0x26	; 38
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	26 e2       	ldi	r18, 0x26	; 38
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	f9 01       	movw	r30, r18
     466:	20 81       	ld	r18, Z
     468:	27 7f       	andi	r18, 0xF7	; 247
     46a:	fc 01       	movw	r30, r24
     46c:	20 83       	st	Z, r18
     46e:	86 e2       	ldi	r24, 0x26	; 38
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	26 e2       	ldi	r18, 0x26	; 38
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	f9 01       	movw	r30, r18
     478:	20 81       	ld	r18, Z
     47a:	42 2f       	mov	r20, r18
     47c:	29 81       	ldd	r18, Y+1	; 0x01
     47e:	3a 81       	ldd	r19, Y+2	; 0x02
     480:	f9 01       	movw	r30, r18
     482:	21 81       	ldd	r18, Z+1	; 0x01
     484:	22 2f       	mov	r18, r18
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	22 0f       	add	r18, r18
     48a:	33 1f       	adc	r19, r19
     48c:	22 0f       	add	r18, r18
     48e:	33 1f       	adc	r19, r19
     490:	22 0f       	add	r18, r18
     492:	33 1f       	adc	r19, r19
     494:	24 2b       	or	r18, r20
     496:	fc 01       	movw	r30, r24
     498:	20 83       	st	Z, r18
	/*
	 * setting the prescale value in ADCSRA register
	 * */
	ADCSRA =(ADCSRA & 0xF8) | config_ptr->prescaler;
     49a:	86 e2       	ldi	r24, 0x26	; 38
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	26 e2       	ldi	r18, 0x26	; 38
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	f9 01       	movw	r30, r18
     4a4:	20 81       	ld	r18, Z
     4a6:	42 2f       	mov	r20, r18
     4a8:	48 7f       	andi	r20, 0xF8	; 248
     4aa:	29 81       	ldd	r18, Y+1	; 0x01
     4ac:	3a 81       	ldd	r19, Y+2	; 0x02
     4ae:	f9 01       	movw	r30, r18
     4b0:	22 81       	ldd	r18, Z+2	; 0x02
     4b2:	24 2b       	or	r18, r20
     4b4:	fc 01       	movw	r30, r24
     4b6:	20 83       	st	Z, r18
}
     4b8:	00 00       	nop
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	08 95       	ret

000004c4 <ADC_readChannel>:

void ADC_readChannel(const ADC_config_struct * config_ptr,ADC_channel a_channel)
{
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	00 d0       	rcall	.+0      	; 0x4ca <ADC_readChannel+0x6>
     4ca:	1f 92       	push	r1
     4cc:	cd b7       	in	r28, 0x3d	; 61
     4ce:	de b7       	in	r29, 0x3e	; 62
     4d0:	9a 83       	std	Y+2, r25	; 0x02
     4d2:	89 83       	std	Y+1, r24	; 0x01
     4d4:	6b 83       	std	Y+3, r22	; 0x03
	/*
	 * setting the channel that will be converted
	 * */
	ADMUX = (ADMUX & 0xE0) |a_channel;
     4d6:	87 e2       	ldi	r24, 0x27	; 39
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	27 e2       	ldi	r18, 0x27	; 39
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	f9 01       	movw	r30, r18
     4e0:	20 81       	ld	r18, Z
     4e2:	32 2f       	mov	r19, r18
     4e4:	30 7e       	andi	r19, 0xE0	; 224
     4e6:	2b 81       	ldd	r18, Y+3	; 0x03
     4e8:	23 2b       	or	r18, r19
     4ea:	fc 01       	movw	r30, r24
     4ec:	20 83       	st	Z, r18
	/*
	 * start conversion
	 * */
	SET_BIT(ADCSRA , ADSC);
     4ee:	86 e2       	ldi	r24, 0x26	; 38
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	26 e2       	ldi	r18, 0x26	; 38
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	f9 01       	movw	r30, r18
     4f8:	20 81       	ld	r18, Z
     4fa:	20 64       	ori	r18, 0x40	; 64
     4fc:	fc 01       	movw	r30, r24
     4fe:	20 83       	st	Z, r18
	/*
	 * polling service routine
	 */
	if(config_ptr->type == POLLING)
     500:	89 81       	ldd	r24, Y+1	; 0x01
     502:	9a 81       	ldd	r25, Y+2	; 0x02
     504:	fc 01       	movw	r30, r24
     506:	81 81       	ldd	r24, Z+1	; 0x01
     508:	88 23       	and	r24, r24
     50a:	49 f5       	brne	.+82     	; 0x55e <ADC_readChannel+0x9a>
	{
		/*
		 * wait until conversion at adc module is over
		 */
		while(BIT_IS_CLEAR(ADCSRA , ADIF)){};
     50c:	00 00       	nop
     50e:	86 e2       	ldi	r24, 0x26	; 38
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	fc 01       	movw	r30, r24
     514:	80 81       	ld	r24, Z
     516:	88 2f       	mov	r24, r24
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	80 71       	andi	r24, 0x10	; 16
     51c:	99 27       	eor	r25, r25
     51e:	89 2b       	or	r24, r25
     520:	b1 f3       	breq	.-20     	; 0x50e <ADC_readChannel+0x4a>
		/*
		 * clearing the interrupt module flag
		 */
		SET_BIT(ADCSRA , ADIF);
     522:	86 e2       	ldi	r24, 0x26	; 38
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	26 e2       	ldi	r18, 0x26	; 38
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	f9 01       	movw	r30, r18
     52c:	20 81       	ld	r18, Z
     52e:	20 61       	ori	r18, 0x10	; 16
     530:	fc 01       	movw	r30, r24
     532:	20 83       	st	Z, r18
		/*
		 * storing conversion result in current_reading global variable
		 */
		current_reading = ADC;
     534:	84 e2       	ldi	r24, 0x24	; 36
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	fc 01       	movw	r30, r24
     53a:	80 81       	ld	r24, Z
     53c:	91 81       	ldd	r25, Z+1	; 0x01
     53e:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <current_reading+0x1>
     542:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <current_reading>
		/*
		 * callback function of the hardware sensor conversion for result
		 */
		if(ADC_interruptFunc_ptr != NULL)
     546:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <ADC_interruptFunc_ptr>
     54a:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <ADC_interruptFunc_ptr+0x1>
     54e:	89 2b       	or	r24, r25
     550:	31 f0       	breq	.+12     	; 0x55e <ADC_readChannel+0x9a>
			{
				ADC_interruptFunc_ptr();
     552:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <ADC_interruptFunc_ptr>
     556:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <ADC_interruptFunc_ptr+0x1>
     55a:	fc 01       	movw	r30, r24
     55c:	09 95       	icall
			}
	}
}
     55e:	00 00       	nop
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <ADC_setCallBack>:
void ADC_setCallBack(void (*a_ptr)(void))
{
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	00 d0       	rcall	.+0      	; 0x572 <ADC_setCallBack+0x6>
     572:	cd b7       	in	r28, 0x3d	; 61
     574:	de b7       	in	r29, 0x3e	; 62
     576:	9a 83       	std	Y+2, r25	; 0x02
     578:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * passing the address of the call back function
	 * */
	ADC_interruptFunc_ptr = a_ptr;
     57a:	89 81       	ldd	r24, Y+1	; 0x01
     57c:	9a 81       	ldd	r25, Y+2	; 0x02
     57e:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <ADC_interruptFunc_ptr+0x1>
     582:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <ADC_interruptFunc_ptr>
}
     586:	00 00       	nop
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	08 95       	ret

00000592 <__vector_14>:
/*********************************************************************************
* 								Interrupt service routines							 *
 *********************************************************************************/
ISR(ADC_vect)
{
     592:	1f 92       	push	r1
     594:	0f 92       	push	r0
     596:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     59a:	0f 92       	push	r0
     59c:	11 24       	eor	r1, r1
     59e:	2f 93       	push	r18
     5a0:	3f 93       	push	r19
     5a2:	4f 93       	push	r20
     5a4:	5f 93       	push	r21
     5a6:	6f 93       	push	r22
     5a8:	7f 93       	push	r23
     5aa:	8f 93       	push	r24
     5ac:	9f 93       	push	r25
     5ae:	af 93       	push	r26
     5b0:	bf 93       	push	r27
     5b2:	ef 93       	push	r30
     5b4:	ff 93       	push	r31
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	cd b7       	in	r28, 0x3d	; 61
     5bc:	de b7       	in	r29, 0x3e	; 62
	/*
	 * storing conversion result in current_reading global variable
	 */
	current_reading = ADC;
     5be:	84 e2       	ldi	r24, 0x24	; 36
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	fc 01       	movw	r30, r24
     5c4:	80 81       	ld	r24, Z
     5c6:	91 81       	ldd	r25, Z+1	; 0x01
     5c8:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <current_reading+0x1>
     5cc:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <current_reading>
	if(ADC_interruptFunc_ptr != NULL)
     5d0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <ADC_interruptFunc_ptr>
     5d4:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <ADC_interruptFunc_ptr+0x1>
     5d8:	89 2b       	or	r24, r25
     5da:	31 f0       	breq	.+12     	; 0x5e8 <__vector_14+0x56>
	{
		ADC_interruptFunc_ptr();
     5dc:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <ADC_interruptFunc_ptr>
     5e0:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <ADC_interruptFunc_ptr+0x1>
     5e4:	fc 01       	movw	r30, r24
     5e6:	09 95       	icall
	}
}
     5e8:	00 00       	nop
     5ea:	df 91       	pop	r29
     5ec:	cf 91       	pop	r28
     5ee:	ff 91       	pop	r31
     5f0:	ef 91       	pop	r30
     5f2:	bf 91       	pop	r27
     5f4:	af 91       	pop	r26
     5f6:	9f 91       	pop	r25
     5f8:	8f 91       	pop	r24
     5fa:	7f 91       	pop	r23
     5fc:	6f 91       	pop	r22
     5fe:	5f 91       	pop	r21
     600:	4f 91       	pop	r20
     602:	3f 91       	pop	r19
     604:	2f 91       	pop	r18
     606:	0f 90       	pop	r0
     608:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     60c:	0f 90       	pop	r0
     60e:	1f 90       	pop	r1
     610:	18 95       	reti

00000612 <DCMOTOR_init>:

/*********************************************************************************
 * 								Function Definitions							 *
 *********************************************************************************/
void DCMOTOR_init(void)
{
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DC_MOTOR_DIR , IN1);
     61a:	87 e3       	ldi	r24, 0x37	; 55
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	27 e3       	ldi	r18, 0x37	; 55
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	f9 01       	movw	r30, r18
     624:	20 81       	ld	r18, Z
     626:	24 60       	ori	r18, 0x04	; 4
     628:	fc 01       	movw	r30, r24
     62a:	20 83       	st	Z, r18
	SET_BIT(DC_MOTOR_DIR , IN2);
     62c:	87 e3       	ldi	r24, 0x37	; 55
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	27 e3       	ldi	r18, 0x37	; 55
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	f9 01       	movw	r30, r18
     636:	20 81       	ld	r18, Z
     638:	22 60       	ori	r18, 0x02	; 2
     63a:	fc 01       	movw	r30, r24
     63c:	20 83       	st	Z, r18
}
     63e:	00 00       	nop
     640:	df 91       	pop	r29
     642:	cf 91       	pop	r28
     644:	08 95       	ret

00000646 <DCMOTOR_setSpeed>:
void DCMOTOR_setSpeed(uint8 speed)
{
     646:	cf 93       	push	r28
     648:	df 93       	push	r29
     64a:	1f 92       	push	r1
     64c:	cd b7       	in	r28, 0x3d	; 61
     64e:	de b7       	in	r29, 0x3e	; 62
     650:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_setCompareValue(speed);
     652:	89 81       	ldd	r24, Y+1	; 0x01
     654:	0e 94 71 01 	call	0x2e2	; 0x2e2 <TIMER0_setCompareValue>
}
     658:	00 00       	nop
     65a:	0f 90       	pop	r0
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	08 95       	ret

00000662 <DCMOTOR_move>:
void DCMOTOR_move(void)
{
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	cd b7       	in	r28, 0x3d	; 61
     668:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(DC_MOTOR_PORT , IN1);
     66a:	88 e3       	ldi	r24, 0x38	; 56
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	28 e3       	ldi	r18, 0x38	; 56
     670:	30 e0       	ldi	r19, 0x00	; 0
     672:	f9 01       	movw	r30, r18
     674:	20 81       	ld	r18, Z
     676:	24 60       	ori	r18, 0x04	; 4
     678:	fc 01       	movw	r30, r24
     67a:	20 83       	st	Z, r18
	CLEAR_BIT(DC_MOTOR_PORT , IN2);
     67c:	88 e3       	ldi	r24, 0x38	; 56
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	28 e3       	ldi	r18, 0x38	; 56
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	f9 01       	movw	r30, r18
     686:	20 81       	ld	r18, Z
     688:	2d 7f       	andi	r18, 0xFD	; 253
     68a:	fc 01       	movw	r30, r24
     68c:	20 83       	st	Z, r18

}
     68e:	00 00       	nop
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <DCMOTOR_toggleMove>:
void DCMOTOR_toggleMove(void)
{
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
	TOGGLE_BIT(DC_MOTOR_PORT , IN2);
     69e:	88 e3       	ldi	r24, 0x38	; 56
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	28 e3       	ldi	r18, 0x38	; 56
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	f9 01       	movw	r30, r18
     6a8:	30 81       	ld	r19, Z
     6aa:	22 e0       	ldi	r18, 0x02	; 2
     6ac:	23 27       	eor	r18, r19
     6ae:	fc 01       	movw	r30, r24
     6b0:	20 83       	st	Z, r18
	TOGGLE_BIT(DC_MOTOR_PORT , IN1);
     6b2:	88 e3       	ldi	r24, 0x38	; 56
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	28 e3       	ldi	r18, 0x38	; 56
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	f9 01       	movw	r30, r18
     6bc:	30 81       	ld	r19, Z
     6be:	24 e0       	ldi	r18, 0x04	; 4
     6c0:	23 27       	eor	r18, r19
     6c2:	fc 01       	movw	r30, r24
     6c4:	20 83       	st	Z, r18
}
     6c6:	00 00       	nop
     6c8:	df 91       	pop	r29
     6ca:	cf 91       	pop	r28
     6cc:	08 95       	ret

000006ce <DCMOTOR_stop>:
void DCMOTOR_stop(void)
{
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	cd b7       	in	r28, 0x3d	; 61
     6d4:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(DC_MOTOR_PORT , IN2);
     6d6:	88 e3       	ldi	r24, 0x38	; 56
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	28 e3       	ldi	r18, 0x38	; 56
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	f9 01       	movw	r30, r18
     6e0:	20 81       	ld	r18, Z
     6e2:	2d 7f       	andi	r18, 0xFD	; 253
     6e4:	fc 01       	movw	r30, r24
     6e6:	20 83       	st	Z, r18
	CLEAR_BIT(DC_MOTOR_PORT , IN1);
     6e8:	88 e3       	ldi	r24, 0x38	; 56
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	28 e3       	ldi	r18, 0x38	; 56
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	f9 01       	movw	r30, r18
     6f2:	20 81       	ld	r18, Z
     6f4:	2b 7f       	andi	r18, 0xFB	; 251
     6f6:	fc 01       	movw	r30, r24
     6f8:	20 83       	st	Z, r18
}
     6fa:	00 00       	nop
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	08 95       	ret

00000702 <INT0_init>:
static void (* volatile g_INT2_interruptFunc_ptr)(void) = NULL;
/*********************************************************************************
* 								Function Definitions							 *
 *********************************************************************************/
void INT0_init(Int0_ctrl mode , Input_state state)
{
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	00 d0       	rcall	.+0      	; 0x708 <INT0_init+0x6>
     708:	cd b7       	in	r28, 0x3d	; 61
     70a:	de b7       	in	r29, 0x3e	; 62
     70c:	89 83       	std	Y+1, r24	; 0x01
     70e:	6a 83       	std	Y+2, r22	; 0x02
	MCUCR |= mode;
     710:	85 e5       	ldi	r24, 0x55	; 85
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	25 e5       	ldi	r18, 0x55	; 85
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	f9 01       	movw	r30, r18
     71a:	30 81       	ld	r19, Z
     71c:	29 81       	ldd	r18, Y+1	; 0x01
     71e:	23 2b       	or	r18, r19
     720:	fc 01       	movw	r30, r24
     722:	20 83       	st	Z, r18
	SET_BIT(GICR , 6);
     724:	8b e5       	ldi	r24, 0x5B	; 91
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	2b e5       	ldi	r18, 0x5B	; 91
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	f9 01       	movw	r30, r18
     72e:	20 81       	ld	r18, Z
     730:	20 64       	ori	r18, 0x40	; 64
     732:	fc 01       	movw	r30, r24
     734:	20 83       	st	Z, r18
	CLEAR_BIT(DDRD , PD2);
     736:	81 e3       	ldi	r24, 0x31	; 49
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	21 e3       	ldi	r18, 0x31	; 49
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	f9 01       	movw	r30, r18
     740:	20 81       	ld	r18, Z
     742:	2b 7f       	andi	r18, 0xFB	; 251
     744:	fc 01       	movw	r30, r24
     746:	20 83       	st	Z, r18
	SET_VALUE(PORTD , PD2 , state);
     748:	82 e3       	ldi	r24, 0x32	; 50
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	22 e3       	ldi	r18, 0x32	; 50
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	f9 01       	movw	r30, r18
     752:	20 81       	ld	r18, Z
     754:	2b 7f       	andi	r18, 0xFB	; 251
     756:	fc 01       	movw	r30, r24
     758:	20 83       	st	Z, r18
     75a:	82 e3       	ldi	r24, 0x32	; 50
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	22 e3       	ldi	r18, 0x32	; 50
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	f9 01       	movw	r30, r18
     764:	20 81       	ld	r18, Z
     766:	42 2f       	mov	r20, r18
     768:	2a 81       	ldd	r18, Y+2	; 0x02
     76a:	22 2f       	mov	r18, r18
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	22 0f       	add	r18, r18
     770:	33 1f       	adc	r19, r19
     772:	22 0f       	add	r18, r18
     774:	33 1f       	adc	r19, r19
     776:	24 2b       	or	r18, r20
     778:	fc 01       	movw	r30, r24
     77a:	20 83       	st	Z, r18
}
     77c:	00 00       	nop
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	08 95       	ret

00000788 <INT1_init>:
void INT1_init(Int1_ctrl mode , Input_state state)
{
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	00 d0       	rcall	.+0      	; 0x78e <INT1_init+0x6>
     78e:	cd b7       	in	r28, 0x3d	; 61
     790:	de b7       	in	r29, 0x3e	; 62
     792:	89 83       	std	Y+1, r24	; 0x01
     794:	6a 83       	std	Y+2, r22	; 0x02
	MCUCR |= mode<<ISC10;
     796:	85 e5       	ldi	r24, 0x55	; 85
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	25 e5       	ldi	r18, 0x55	; 85
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	f9 01       	movw	r30, r18
     7a0:	20 81       	ld	r18, Z
     7a2:	42 2f       	mov	r20, r18
     7a4:	29 81       	ldd	r18, Y+1	; 0x01
     7a6:	22 2f       	mov	r18, r18
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	22 0f       	add	r18, r18
     7ac:	33 1f       	adc	r19, r19
     7ae:	22 0f       	add	r18, r18
     7b0:	33 1f       	adc	r19, r19
     7b2:	24 2b       	or	r18, r20
     7b4:	fc 01       	movw	r30, r24
     7b6:	20 83       	st	Z, r18
	SET_BIT(GICR , 7);
     7b8:	8b e5       	ldi	r24, 0x5B	; 91
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	2b e5       	ldi	r18, 0x5B	; 91
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	f9 01       	movw	r30, r18
     7c2:	20 81       	ld	r18, Z
     7c4:	20 68       	ori	r18, 0x80	; 128
     7c6:	fc 01       	movw	r30, r24
     7c8:	20 83       	st	Z, r18
	CLEAR_BIT(DDRD , PD3);
     7ca:	81 e3       	ldi	r24, 0x31	; 49
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	21 e3       	ldi	r18, 0x31	; 49
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	f9 01       	movw	r30, r18
     7d4:	20 81       	ld	r18, Z
     7d6:	27 7f       	andi	r18, 0xF7	; 247
     7d8:	fc 01       	movw	r30, r24
     7da:	20 83       	st	Z, r18
	SET_VALUE(PORTD , PD3 , state);
     7dc:	82 e3       	ldi	r24, 0x32	; 50
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	22 e3       	ldi	r18, 0x32	; 50
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	f9 01       	movw	r30, r18
     7e6:	20 81       	ld	r18, Z
     7e8:	27 7f       	andi	r18, 0xF7	; 247
     7ea:	fc 01       	movw	r30, r24
     7ec:	20 83       	st	Z, r18
     7ee:	82 e3       	ldi	r24, 0x32	; 50
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	22 e3       	ldi	r18, 0x32	; 50
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	f9 01       	movw	r30, r18
     7f8:	20 81       	ld	r18, Z
     7fa:	42 2f       	mov	r20, r18
     7fc:	2a 81       	ldd	r18, Y+2	; 0x02
     7fe:	22 2f       	mov	r18, r18
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	22 0f       	add	r18, r18
     804:	33 1f       	adc	r19, r19
     806:	22 0f       	add	r18, r18
     808:	33 1f       	adc	r19, r19
     80a:	22 0f       	add	r18, r18
     80c:	33 1f       	adc	r19, r19
     80e:	24 2b       	or	r18, r20
     810:	fc 01       	movw	r30, r24
     812:	20 83       	st	Z, r18
}
     814:	00 00       	nop
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	08 95       	ret

00000820 <INT2_init>:
void INT2_init(Int2_ctrl mode , Input_state state)
{
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	00 d0       	rcall	.+0      	; 0x826 <INT2_init+0x6>
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
     82a:	89 83       	std	Y+1, r24	; 0x01
     82c:	6a 83       	std	Y+2, r22	; 0x02
	SET_VALUE(MCUCSR , ISC2 , mode);
     82e:	84 e5       	ldi	r24, 0x54	; 84
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	24 e5       	ldi	r18, 0x54	; 84
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	f9 01       	movw	r30, r18
     838:	20 81       	ld	r18, Z
     83a:	2f 7b       	andi	r18, 0xBF	; 191
     83c:	fc 01       	movw	r30, r24
     83e:	20 83       	st	Z, r18
     840:	84 e5       	ldi	r24, 0x54	; 84
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	24 e5       	ldi	r18, 0x54	; 84
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	f9 01       	movw	r30, r18
     84a:	20 81       	ld	r18, Z
     84c:	42 2f       	mov	r20, r18
     84e:	29 81       	ldd	r18, Y+1	; 0x01
     850:	22 2f       	mov	r18, r18
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	00 24       	eor	r0, r0
     856:	36 95       	lsr	r19
     858:	27 95       	ror	r18
     85a:	07 94       	ror	r0
     85c:	36 95       	lsr	r19
     85e:	27 95       	ror	r18
     860:	07 94       	ror	r0
     862:	32 2f       	mov	r19, r18
     864:	20 2d       	mov	r18, r0
     866:	24 2b       	or	r18, r20
     868:	fc 01       	movw	r30, r24
     86a:	20 83       	st	Z, r18
	SET_BIT(GICR , 5);
     86c:	8b e5       	ldi	r24, 0x5B	; 91
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	2b e5       	ldi	r18, 0x5B	; 91
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	f9 01       	movw	r30, r18
     876:	20 81       	ld	r18, Z
     878:	20 62       	ori	r18, 0x20	; 32
     87a:	fc 01       	movw	r30, r24
     87c:	20 83       	st	Z, r18
	CLEAR_BIT(DDRB , PB2);
     87e:	87 e3       	ldi	r24, 0x37	; 55
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	27 e3       	ldi	r18, 0x37	; 55
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	f9 01       	movw	r30, r18
     888:	20 81       	ld	r18, Z
     88a:	2b 7f       	andi	r18, 0xFB	; 251
     88c:	fc 01       	movw	r30, r24
     88e:	20 83       	st	Z, r18
	SET_VALUE(PORTB , PB2 , state);
     890:	88 e3       	ldi	r24, 0x38	; 56
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	28 e3       	ldi	r18, 0x38	; 56
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	f9 01       	movw	r30, r18
     89a:	20 81       	ld	r18, Z
     89c:	2b 7f       	andi	r18, 0xFB	; 251
     89e:	fc 01       	movw	r30, r24
     8a0:	20 83       	st	Z, r18
     8a2:	88 e3       	ldi	r24, 0x38	; 56
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	28 e3       	ldi	r18, 0x38	; 56
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	f9 01       	movw	r30, r18
     8ac:	20 81       	ld	r18, Z
     8ae:	42 2f       	mov	r20, r18
     8b0:	2a 81       	ldd	r18, Y+2	; 0x02
     8b2:	22 2f       	mov	r18, r18
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	22 0f       	add	r18, r18
     8b8:	33 1f       	adc	r19, r19
     8ba:	22 0f       	add	r18, r18
     8bc:	33 1f       	adc	r19, r19
     8be:	24 2b       	or	r18, r20
     8c0:	fc 01       	movw	r30, r24
     8c2:	20 83       	st	Z, r18
}
     8c4:	00 00       	nop
     8c6:	0f 90       	pop	r0
     8c8:	0f 90       	pop	r0
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	08 95       	ret

000008d0 <INT0_setCallBack>:
void INT0_setCallBack(void (*a_ptr)(void))
{
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	00 d0       	rcall	.+0      	; 0x8d6 <INT0_setCallBack+0x6>
     8d6:	cd b7       	in	r28, 0x3d	; 61
     8d8:	de b7       	in	r29, 0x3e	; 62
     8da:	9a 83       	std	Y+2, r25	; 0x02
     8dc:	89 83       	std	Y+1, r24	; 0x01
	g_INT0_interruptFunc_ptr = a_ptr;
     8de:	89 81       	ldd	r24, Y+1	; 0x01
     8e0:	9a 81       	ldd	r25, Y+2	; 0x02
     8e2:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <g_INT0_interruptFunc_ptr+0x1>
     8e6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <g_INT0_interruptFunc_ptr>
}
     8ea:	00 00       	nop
     8ec:	0f 90       	pop	r0
     8ee:	0f 90       	pop	r0
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	08 95       	ret

000008f6 <INT1_setCallBack>:
void INT1_setCallBack(void (*a_ptr)(void))
{
     8f6:	cf 93       	push	r28
     8f8:	df 93       	push	r29
     8fa:	00 d0       	rcall	.+0      	; 0x8fc <INT1_setCallBack+0x6>
     8fc:	cd b7       	in	r28, 0x3d	; 61
     8fe:	de b7       	in	r29, 0x3e	; 62
     900:	9a 83       	std	Y+2, r25	; 0x02
     902:	89 83       	std	Y+1, r24	; 0x01
	g_INT1_interruptFunc_ptr = a_ptr;
     904:	89 81       	ldd	r24, Y+1	; 0x01
     906:	9a 81       	ldd	r25, Y+2	; 0x02
     908:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <g_INT1_interruptFunc_ptr+0x1>
     90c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <g_INT1_interruptFunc_ptr>
}
     910:	00 00       	nop
     912:	0f 90       	pop	r0
     914:	0f 90       	pop	r0
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	08 95       	ret

0000091c <INT2_setCallBack>:
void INT2_setCallBack(void (*a_ptr)(void))
{
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	00 d0       	rcall	.+0      	; 0x922 <INT2_setCallBack+0x6>
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
     926:	9a 83       	std	Y+2, r25	; 0x02
     928:	89 83       	std	Y+1, r24	; 0x01
	g_INT2_interruptFunc_ptr = a_ptr;
     92a:	89 81       	ldd	r24, Y+1	; 0x01
     92c:	9a 81       	ldd	r25, Y+2	; 0x02
     92e:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <g_INT2_interruptFunc_ptr+0x1>
     932:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <g_INT2_interruptFunc_ptr>
}
     936:	00 00       	nop
     938:	0f 90       	pop	r0
     93a:	0f 90       	pop	r0
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	08 95       	ret

00000942 <__vector_1>:
/*********************************************************************************
 * 								interrupt service routines						 *
 *********************************************************************************/
ISR(INT0_vect)
{
     942:	1f 92       	push	r1
     944:	0f 92       	push	r0
     946:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     94a:	0f 92       	push	r0
     94c:	11 24       	eor	r1, r1
     94e:	2f 93       	push	r18
     950:	3f 93       	push	r19
     952:	4f 93       	push	r20
     954:	5f 93       	push	r21
     956:	6f 93       	push	r22
     958:	7f 93       	push	r23
     95a:	8f 93       	push	r24
     95c:	9f 93       	push	r25
     95e:	af 93       	push	r26
     960:	bf 93       	push	r27
     962:	ef 93       	push	r30
     964:	ff 93       	push	r31
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	cd b7       	in	r28, 0x3d	; 61
     96c:	de b7       	in	r29, 0x3e	; 62
	if(g_INT0_interruptFunc_ptr != NULL)
     96e:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <g_INT0_interruptFunc_ptr>
     972:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <g_INT0_interruptFunc_ptr+0x1>
     976:	89 2b       	or	r24, r25
     978:	31 f0       	breq	.+12     	; 0x986 <__vector_1+0x44>
	{
		g_INT0_interruptFunc_ptr();
     97a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <g_INT0_interruptFunc_ptr>
     97e:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <g_INT0_interruptFunc_ptr+0x1>
     982:	fc 01       	movw	r30, r24
     984:	09 95       	icall
	}
}
     986:	00 00       	nop
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	ff 91       	pop	r31
     98e:	ef 91       	pop	r30
     990:	bf 91       	pop	r27
     992:	af 91       	pop	r26
     994:	9f 91       	pop	r25
     996:	8f 91       	pop	r24
     998:	7f 91       	pop	r23
     99a:	6f 91       	pop	r22
     99c:	5f 91       	pop	r21
     99e:	4f 91       	pop	r20
     9a0:	3f 91       	pop	r19
     9a2:	2f 91       	pop	r18
     9a4:	0f 90       	pop	r0
     9a6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     9aa:	0f 90       	pop	r0
     9ac:	1f 90       	pop	r1
     9ae:	18 95       	reti

000009b0 <__vector_2>:
ISR(INT1_vect)
{
     9b0:	1f 92       	push	r1
     9b2:	0f 92       	push	r0
     9b4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     9b8:	0f 92       	push	r0
     9ba:	11 24       	eor	r1, r1
     9bc:	2f 93       	push	r18
     9be:	3f 93       	push	r19
     9c0:	4f 93       	push	r20
     9c2:	5f 93       	push	r21
     9c4:	6f 93       	push	r22
     9c6:	7f 93       	push	r23
     9c8:	8f 93       	push	r24
     9ca:	9f 93       	push	r25
     9cc:	af 93       	push	r26
     9ce:	bf 93       	push	r27
     9d0:	ef 93       	push	r30
     9d2:	ff 93       	push	r31
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	cd b7       	in	r28, 0x3d	; 61
     9da:	de b7       	in	r29, 0x3e	; 62
	if(g_INT1_interruptFunc_ptr != NULL)
     9dc:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <g_INT1_interruptFunc_ptr>
     9e0:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <g_INT1_interruptFunc_ptr+0x1>
     9e4:	89 2b       	or	r24, r25
     9e6:	31 f0       	breq	.+12     	; 0x9f4 <__vector_2+0x44>
	{
		g_INT1_interruptFunc_ptr();
     9e8:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <g_INT1_interruptFunc_ptr>
     9ec:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <g_INT1_interruptFunc_ptr+0x1>
     9f0:	fc 01       	movw	r30, r24
     9f2:	09 95       	icall
	}
}
     9f4:	00 00       	nop
     9f6:	df 91       	pop	r29
     9f8:	cf 91       	pop	r28
     9fa:	ff 91       	pop	r31
     9fc:	ef 91       	pop	r30
     9fe:	bf 91       	pop	r27
     a00:	af 91       	pop	r26
     a02:	9f 91       	pop	r25
     a04:	8f 91       	pop	r24
     a06:	7f 91       	pop	r23
     a08:	6f 91       	pop	r22
     a0a:	5f 91       	pop	r21
     a0c:	4f 91       	pop	r20
     a0e:	3f 91       	pop	r19
     a10:	2f 91       	pop	r18
     a12:	0f 90       	pop	r0
     a14:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     a18:	0f 90       	pop	r0
     a1a:	1f 90       	pop	r1
     a1c:	18 95       	reti

00000a1e <__vector_18>:
ISR(INT2_vect)
{
     a1e:	1f 92       	push	r1
     a20:	0f 92       	push	r0
     a22:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     a26:	0f 92       	push	r0
     a28:	11 24       	eor	r1, r1
     a2a:	2f 93       	push	r18
     a2c:	3f 93       	push	r19
     a2e:	4f 93       	push	r20
     a30:	5f 93       	push	r21
     a32:	6f 93       	push	r22
     a34:	7f 93       	push	r23
     a36:	8f 93       	push	r24
     a38:	9f 93       	push	r25
     a3a:	af 93       	push	r26
     a3c:	bf 93       	push	r27
     a3e:	ef 93       	push	r30
     a40:	ff 93       	push	r31
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	cd b7       	in	r28, 0x3d	; 61
     a48:	de b7       	in	r29, 0x3e	; 62
	if(g_INT2_interruptFunc_ptr != NULL)
     a4a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <g_INT2_interruptFunc_ptr>
     a4e:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <g_INT2_interruptFunc_ptr+0x1>
     a52:	89 2b       	or	r24, r25
     a54:	31 f0       	breq	.+12     	; 0xa62 <__vector_18+0x44>
	{
		g_INT2_interruptFunc_ptr();
     a56:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <g_INT2_interruptFunc_ptr>
     a5a:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <g_INT2_interruptFunc_ptr+0x1>
     a5e:	fc 01       	movw	r30, r24
     a60:	09 95       	icall
	}
}
     a62:	00 00       	nop
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	ff 91       	pop	r31
     a6a:	ef 91       	pop	r30
     a6c:	bf 91       	pop	r27
     a6e:	af 91       	pop	r26
     a70:	9f 91       	pop	r25
     a72:	8f 91       	pop	r24
     a74:	7f 91       	pop	r23
     a76:	6f 91       	pop	r22
     a78:	5f 91       	pop	r21
     a7a:	4f 91       	pop	r20
     a7c:	3f 91       	pop	r19
     a7e:	2f 91       	pop	r18
     a80:	0f 90       	pop	r0
     a82:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     a86:	0f 90       	pop	r0
     a88:	1f 90       	pop	r1
     a8a:	18 95       	reti

00000a8c <LCD_init>:
 *******************************************************************************/
#include"lcd.h"

/*--------------------------------------FUNCTION DEFINITIONS---------------------------------------------*/
void LCD_init(void)
{
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	cd b7       	in	r28, 0x3d	; 61
     a92:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(LCD_CTRL_DIR , RS);	/* make RS pin o/p pin*/
     a94:	81 e3       	ldi	r24, 0x31	; 49
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	21 e3       	ldi	r18, 0x31	; 49
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	f9 01       	movw	r30, r18
     a9e:	20 81       	ld	r18, Z
     aa0:	21 60       	ori	r18, 0x01	; 1
     aa2:	fc 01       	movw	r30, r24
     aa4:	20 83       	st	Z, r18
	SET_BIT(LCD_CTRL_DIR , RW);	/* make RW pin o/p pin*/
     aa6:	81 e3       	ldi	r24, 0x31	; 49
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	21 e3       	ldi	r18, 0x31	; 49
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	f9 01       	movw	r30, r18
     ab0:	20 81       	ld	r18, Z
     ab2:	22 60       	ori	r18, 0x02	; 2
     ab4:	fc 01       	movw	r30, r24
     ab6:	20 83       	st	Z, r18
	SET_BIT(LCD_CTRL_DIR , E);	/*make E pin o/p pin*/
     ab8:	81 e3       	ldi	r24, 0x31	; 49
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	21 e3       	ldi	r18, 0x31	; 49
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	f9 01       	movw	r30, r18
     ac2:	20 81       	ld	r18, Z
     ac4:	24 60       	ori	r18, 0x04	; 4
     ac6:	fc 01       	movw	r30, r24
     ac8:	20 83       	st	Z, r18
#endif
	LCD_sendCommand(SWITCH_4_BIT_MODE);
	LCD_sendCommand(TWO_LINE_4_BITS);
#endif
#ifndef LCD_4_BITS_MODE
	SET_UPPER(LCD_DATA_DIR);
     aca:	84 e3       	ldi	r24, 0x34	; 52
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	24 e3       	ldi	r18, 0x34	; 52
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	f9 01       	movw	r30, r18
     ad4:	20 81       	ld	r18, Z
     ad6:	2f 60       	ori	r18, 0x0F	; 15
     ad8:	fc 01       	movw	r30, r24
     ada:	20 83       	st	Z, r18
	SET_LOWER(LCD_DATA_DIR);				/* make data port o/p port*/
     adc:	84 e3       	ldi	r24, 0x34	; 52
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	24 e3       	ldi	r18, 0x34	; 52
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	f9 01       	movw	r30, r18
     ae6:	20 81       	ld	r18, Z
     ae8:	20 6f       	ori	r18, 0xF0	; 240
     aea:	fc 01       	movw	r30, r24
     aec:	20 83       	st	Z, r18
	LCD_sendCommand(TWO_LINE_8_BITS);		/* 2lines + 8 bits mode*/
     aee:	88 e3       	ldi	r24, 0x38	; 56
     af0:	0e 94 84 05 	call	0xb08	; 0xb08 <LCD_sendCommand>
#endif
	LCD_sendCommand(DISPLAY_ON_CURSOR_OFF);		/* Cursor off */
     af4:	8c e0       	ldi	r24, 0x0C	; 12
     af6:	0e 94 84 05 	call	0xb08	; 0xb08 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_SCREEN);		/* clear screen*/
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	0e 94 84 05 	call	0xb08	; 0xb08 <LCD_sendCommand>
}
     b00:	00 00       	nop
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	08 95       	ret

00000b08 <LCD_sendCommand>:
void LCD_sendCommand(uint8 command)
{
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	e9 97       	sbiw	r28, 0x39	; 57
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	f8 94       	cli
     b16:	de bf       	out	0x3e, r29	; 62
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	cd bf       	out	0x3d, r28	; 61
     b1c:	89 af       	std	Y+57, r24	; 0x39
	/*function definition*/
	CLEAR_BIT(LCD_CTRL_OUT , RS);	/*for command mode*/
     b1e:	82 e3       	ldi	r24, 0x32	; 50
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	22 e3       	ldi	r18, 0x32	; 50
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	f9 01       	movw	r30, r18
     b28:	20 81       	ld	r18, Z
     b2a:	2e 7f       	andi	r18, 0xFE	; 254
     b2c:	fc 01       	movw	r30, r24
     b2e:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL_OUT , RW);	/*for write mode*/
     b30:	82 e3       	ldi	r24, 0x32	; 50
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	22 e3       	ldi	r18, 0x32	; 50
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	f9 01       	movw	r30, r18
     b3a:	20 81       	ld	r18, Z
     b3c:	2d 7f       	andi	r18, 0xFD	; 253
     b3e:	fc 01       	movw	r30, r24
     b40:	20 83       	st	Z, r18
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	a0 e8       	ldi	r26, 0x80	; 128
     b48:	bf e3       	ldi	r27, 0x3F	; 63
     b4a:	89 83       	std	Y+1, r24	; 0x01
     b4c:	9a 83       	std	Y+2, r25	; 0x02
     b4e:	ab 83       	std	Y+3, r26	; 0x03
     b50:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	4a e7       	ldi	r20, 0x7A	; 122
     b58:	53 e4       	ldi	r21, 0x43	; 67
     b5a:	69 81       	ldd	r22, Y+1	; 0x01
     b5c:	7a 81       	ldd	r23, Y+2	; 0x02
     b5e:	8b 81       	ldd	r24, Y+3	; 0x03
     b60:	9c 81       	ldd	r25, Y+4	; 0x04
     b62:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__mulsf3>
     b66:	dc 01       	movw	r26, r24
     b68:	cb 01       	movw	r24, r22
     b6a:	8f a7       	std	Y+47, r24	; 0x2f
     b6c:	98 ab       	std	Y+48, r25	; 0x30
     b6e:	a9 ab       	std	Y+49, r26	; 0x31
     b70:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     b72:	20 e0       	ldi	r18, 0x00	; 0
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	40 e8       	ldi	r20, 0x80	; 128
     b78:	5f e3       	ldi	r21, 0x3F	; 63
     b7a:	6f a5       	ldd	r22, Y+47	; 0x2f
     b7c:	78 a9       	ldd	r23, Y+48	; 0x30
     b7e:	89 a9       	ldd	r24, Y+49	; 0x31
     b80:	9a a9       	ldd	r25, Y+50	; 0x32
     b82:	0e 94 4d 0a 	call	0x149a	; 0x149a <__cmpsf2>
     b86:	88 23       	and	r24, r24
     b88:	2c f4       	brge	.+10     	; 0xb94 <LCD_sendCommand+0x8c>
		__ticks = 1;
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	9c ab       	std	Y+52, r25	; 0x34
     b90:	8b ab       	std	Y+51, r24	; 0x33
     b92:	3f c0       	rjmp	.+126    	; 0xc12 <LCD_sendCommand+0x10a>
	else if (__tmp > 65535)
     b94:	20 e0       	ldi	r18, 0x00	; 0
     b96:	3f ef       	ldi	r19, 0xFF	; 255
     b98:	4f e7       	ldi	r20, 0x7F	; 127
     b9a:	57 e4       	ldi	r21, 0x47	; 71
     b9c:	6f a5       	ldd	r22, Y+47	; 0x2f
     b9e:	78 a9       	ldd	r23, Y+48	; 0x30
     ba0:	89 a9       	ldd	r24, Y+49	; 0x31
     ba2:	9a a9       	ldd	r25, Y+50	; 0x32
     ba4:	0e 94 ce 0a 	call	0x159c	; 0x159c <__gesf2>
     ba8:	18 16       	cp	r1, r24
     baa:	4c f5       	brge	.+82     	; 0xbfe <LCD_sendCommand+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bac:	20 e0       	ldi	r18, 0x00	; 0
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	40 e2       	ldi	r20, 0x20	; 32
     bb2:	51 e4       	ldi	r21, 0x41	; 65
     bb4:	69 81       	ldd	r22, Y+1	; 0x01
     bb6:	7a 81       	ldd	r23, Y+2	; 0x02
     bb8:	8b 81       	ldd	r24, Y+3	; 0x03
     bba:	9c 81       	ldd	r25, Y+4	; 0x04
     bbc:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__mulsf3>
     bc0:	dc 01       	movw	r26, r24
     bc2:	cb 01       	movw	r24, r22
     bc4:	bc 01       	movw	r22, r24
     bc6:	cd 01       	movw	r24, r26
     bc8:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__fixunssfsi>
     bcc:	dc 01       	movw	r26, r24
     bce:	cb 01       	movw	r24, r22
     bd0:	9c ab       	std	Y+52, r25	; 0x34
     bd2:	8b ab       	std	Y+51, r24	; 0x33
     bd4:	0f c0       	rjmp	.+30     	; 0xbf4 <LCD_sendCommand+0xec>
     bd6:	89 e1       	ldi	r24, 0x19	; 25
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	9e ab       	std	Y+54, r25	; 0x36
     bdc:	8d ab       	std	Y+53, r24	; 0x35
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bde:	8d a9       	ldd	r24, Y+53	; 0x35
     be0:	9e a9       	ldd	r25, Y+54	; 0x36
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	f1 f7       	brne	.-4      	; 0xbe2 <LCD_sendCommand+0xda>
     be6:	9e ab       	std	Y+54, r25	; 0x36
     be8:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bea:	8b a9       	ldd	r24, Y+51	; 0x33
     bec:	9c a9       	ldd	r25, Y+52	; 0x34
     bee:	01 97       	sbiw	r24, 0x01	; 1
     bf0:	9c ab       	std	Y+52, r25	; 0x34
     bf2:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bf4:	8b a9       	ldd	r24, Y+51	; 0x33
     bf6:	9c a9       	ldd	r25, Y+52	; 0x34
     bf8:	89 2b       	or	r24, r25
     bfa:	69 f7       	brne	.-38     	; 0xbd6 <LCD_sendCommand+0xce>
     bfc:	14 c0       	rjmp	.+40     	; 0xc26 <LCD_sendCommand+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bfe:	6f a5       	ldd	r22, Y+47	; 0x2f
     c00:	78 a9       	ldd	r23, Y+48	; 0x30
     c02:	89 a9       	ldd	r24, Y+49	; 0x31
     c04:	9a a9       	ldd	r25, Y+50	; 0x32
     c06:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__fixunssfsi>
     c0a:	dc 01       	movw	r26, r24
     c0c:	cb 01       	movw	r24, r22
     c0e:	9c ab       	std	Y+52, r25	; 0x34
     c10:	8b ab       	std	Y+51, r24	; 0x33
     c12:	8b a9       	ldd	r24, Y+51	; 0x33
     c14:	9c a9       	ldd	r25, Y+52	; 0x34
     c16:	98 af       	std	Y+56, r25	; 0x38
     c18:	8f ab       	std	Y+55, r24	; 0x37
     c1a:	8f a9       	ldd	r24, Y+55	; 0x37
     c1c:	98 ad       	ldd	r25, Y+56	; 0x38
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	f1 f7       	brne	.-4      	; 0xc1e <LCD_sendCommand+0x116>
     c22:	98 af       	std	Y+56, r25	; 0x38
     c24:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(1);					/*for write timing diagram*/
	SET_BIT(LCD_CTRL_OUT , E);		/*to enable the lcd*/
     c26:	82 e3       	ldi	r24, 0x32	; 50
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	22 e3       	ldi	r18, 0x32	; 50
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	f9 01       	movw	r30, r18
     c30:	20 81       	ld	r18, Z
     c32:	24 60       	ori	r18, 0x04	; 4
     c34:	fc 01       	movw	r30, r24
     c36:	20 83       	st	Z, r18
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	a0 e8       	ldi	r26, 0x80	; 128
     c3e:	bf e3       	ldi	r27, 0x3F	; 63
     c40:	8d 83       	std	Y+5, r24	; 0x05
     c42:	9e 83       	std	Y+6, r25	; 0x06
     c44:	af 83       	std	Y+7, r26	; 0x07
     c46:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	4a e7       	ldi	r20, 0x7A	; 122
     c4e:	53 e4       	ldi	r21, 0x43	; 67
     c50:	6d 81       	ldd	r22, Y+5	; 0x05
     c52:	7e 81       	ldd	r23, Y+6	; 0x06
     c54:	8f 81       	ldd	r24, Y+7	; 0x07
     c56:	98 85       	ldd	r25, Y+8	; 0x08
     c58:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__mulsf3>
     c5c:	dc 01       	movw	r26, r24
     c5e:	cb 01       	movw	r24, r22
     c60:	8d a3       	std	Y+37, r24	; 0x25
     c62:	9e a3       	std	Y+38, r25	; 0x26
     c64:	af a3       	std	Y+39, r26	; 0x27
     c66:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	40 e8       	ldi	r20, 0x80	; 128
     c6e:	5f e3       	ldi	r21, 0x3F	; 63
     c70:	6d a1       	ldd	r22, Y+37	; 0x25
     c72:	7e a1       	ldd	r23, Y+38	; 0x26
     c74:	8f a1       	ldd	r24, Y+39	; 0x27
     c76:	98 a5       	ldd	r25, Y+40	; 0x28
     c78:	0e 94 4d 0a 	call	0x149a	; 0x149a <__cmpsf2>
     c7c:	88 23       	and	r24, r24
     c7e:	2c f4       	brge	.+10     	; 0xc8a <LCD_sendCommand+0x182>
		__ticks = 1;
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	9a a7       	std	Y+42, r25	; 0x2a
     c86:	89 a7       	std	Y+41, r24	; 0x29
     c88:	3f c0       	rjmp	.+126    	; 0xd08 <LCD_sendCommand+0x200>
	else if (__tmp > 65535)
     c8a:	20 e0       	ldi	r18, 0x00	; 0
     c8c:	3f ef       	ldi	r19, 0xFF	; 255
     c8e:	4f e7       	ldi	r20, 0x7F	; 127
     c90:	57 e4       	ldi	r21, 0x47	; 71
     c92:	6d a1       	ldd	r22, Y+37	; 0x25
     c94:	7e a1       	ldd	r23, Y+38	; 0x26
     c96:	8f a1       	ldd	r24, Y+39	; 0x27
     c98:	98 a5       	ldd	r25, Y+40	; 0x28
     c9a:	0e 94 ce 0a 	call	0x159c	; 0x159c <__gesf2>
     c9e:	18 16       	cp	r1, r24
     ca0:	4c f5       	brge	.+82     	; 0xcf4 <LCD_sendCommand+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	40 e2       	ldi	r20, 0x20	; 32
     ca8:	51 e4       	ldi	r21, 0x41	; 65
     caa:	6d 81       	ldd	r22, Y+5	; 0x05
     cac:	7e 81       	ldd	r23, Y+6	; 0x06
     cae:	8f 81       	ldd	r24, Y+7	; 0x07
     cb0:	98 85       	ldd	r25, Y+8	; 0x08
     cb2:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__mulsf3>
     cb6:	dc 01       	movw	r26, r24
     cb8:	cb 01       	movw	r24, r22
     cba:	bc 01       	movw	r22, r24
     cbc:	cd 01       	movw	r24, r26
     cbe:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__fixunssfsi>
     cc2:	dc 01       	movw	r26, r24
     cc4:	cb 01       	movw	r24, r22
     cc6:	9a a7       	std	Y+42, r25	; 0x2a
     cc8:	89 a7       	std	Y+41, r24	; 0x29
     cca:	0f c0       	rjmp	.+30     	; 0xcea <LCD_sendCommand+0x1e2>
     ccc:	89 e1       	ldi	r24, 0x19	; 25
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	9c a7       	std	Y+44, r25	; 0x2c
     cd2:	8b a7       	std	Y+43, r24	; 0x2b
     cd4:	8b a5       	ldd	r24, Y+43	; 0x2b
     cd6:	9c a5       	ldd	r25, Y+44	; 0x2c
     cd8:	01 97       	sbiw	r24, 0x01	; 1
     cda:	f1 f7       	brne	.-4      	; 0xcd8 <LCD_sendCommand+0x1d0>
     cdc:	9c a7       	std	Y+44, r25	; 0x2c
     cde:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ce0:	89 a5       	ldd	r24, Y+41	; 0x29
     ce2:	9a a5       	ldd	r25, Y+42	; 0x2a
     ce4:	01 97       	sbiw	r24, 0x01	; 1
     ce6:	9a a7       	std	Y+42, r25	; 0x2a
     ce8:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cea:	89 a5       	ldd	r24, Y+41	; 0x29
     cec:	9a a5       	ldd	r25, Y+42	; 0x2a
     cee:	89 2b       	or	r24, r25
     cf0:	69 f7       	brne	.-38     	; 0xccc <LCD_sendCommand+0x1c4>
     cf2:	14 c0       	rjmp	.+40     	; 0xd1c <LCD_sendCommand+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cf4:	6d a1       	ldd	r22, Y+37	; 0x25
     cf6:	7e a1       	ldd	r23, Y+38	; 0x26
     cf8:	8f a1       	ldd	r24, Y+39	; 0x27
     cfa:	98 a5       	ldd	r25, Y+40	; 0x28
     cfc:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__fixunssfsi>
     d00:	dc 01       	movw	r26, r24
     d02:	cb 01       	movw	r24, r22
     d04:	9a a7       	std	Y+42, r25	; 0x2a
     d06:	89 a7       	std	Y+41, r24	; 0x29
     d08:	89 a5       	ldd	r24, Y+41	; 0x29
     d0a:	9a a5       	ldd	r25, Y+42	; 0x2a
     d0c:	9e a7       	std	Y+46, r25	; 0x2e
     d0e:	8d a7       	std	Y+45, r24	; 0x2d
     d10:	8d a5       	ldd	r24, Y+45	; 0x2d
     d12:	9e a5       	ldd	r25, Y+46	; 0x2e
     d14:	01 97       	sbiw	r24, 0x01	; 1
     d16:	f1 f7       	brne	.-4      	; 0xd14 <LCD_sendCommand+0x20c>
     d18:	9e a7       	std	Y+46, r25	; 0x2e
     d1a:	8d a7       	std	Y+45, r24	; 0x2d
	PUT_UPPER_IN_UPPER(LCD_DATA_OUT , command);
	#else
	PUT_UPPER_IN_LOWER(LCD_DATA_OUT , command);
	#endif
	#else
	LCD_DATA_OUT = command;			/*out the command variable*/
     d1c:	85 e3       	ldi	r24, 0x35	; 53
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	29 ad       	ldd	r18, Y+57	; 0x39
     d22:	fc 01       	movw	r30, r24
     d24:	20 83       	st	Z, r18
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	a0 e8       	ldi	r26, 0x80	; 128
     d2c:	bf e3       	ldi	r27, 0x3F	; 63
     d2e:	89 87       	std	Y+9, r24	; 0x09
     d30:	9a 87       	std	Y+10, r25	; 0x0a
     d32:	ab 87       	std	Y+11, r26	; 0x0b
     d34:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	4a e7       	ldi	r20, 0x7A	; 122
     d3c:	53 e4       	ldi	r21, 0x43	; 67
     d3e:	69 85       	ldd	r22, Y+9	; 0x09
     d40:	7a 85       	ldd	r23, Y+10	; 0x0a
     d42:	8b 85       	ldd	r24, Y+11	; 0x0b
     d44:	9c 85       	ldd	r25, Y+12	; 0x0c
     d46:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__mulsf3>
     d4a:	dc 01       	movw	r26, r24
     d4c:	cb 01       	movw	r24, r22
     d4e:	8b 8f       	std	Y+27, r24	; 0x1b
     d50:	9c 8f       	std	Y+28, r25	; 0x1c
     d52:	ad 8f       	std	Y+29, r26	; 0x1d
     d54:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	40 e8       	ldi	r20, 0x80	; 128
     d5c:	5f e3       	ldi	r21, 0x3F	; 63
     d5e:	6b 8d       	ldd	r22, Y+27	; 0x1b
     d60:	7c 8d       	ldd	r23, Y+28	; 0x1c
     d62:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d64:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d66:	0e 94 4d 0a 	call	0x149a	; 0x149a <__cmpsf2>
     d6a:	88 23       	and	r24, r24
     d6c:	2c f4       	brge	.+10     	; 0xd78 <LCD_sendCommand+0x270>
		__ticks = 1;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	98 a3       	std	Y+32, r25	; 0x20
     d74:	8f 8f       	std	Y+31, r24	; 0x1f
     d76:	3f c0       	rjmp	.+126    	; 0xdf6 <LCD_sendCommand+0x2ee>
	else if (__tmp > 65535)
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	3f ef       	ldi	r19, 0xFF	; 255
     d7c:	4f e7       	ldi	r20, 0x7F	; 127
     d7e:	57 e4       	ldi	r21, 0x47	; 71
     d80:	6b 8d       	ldd	r22, Y+27	; 0x1b
     d82:	7c 8d       	ldd	r23, Y+28	; 0x1c
     d84:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d86:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d88:	0e 94 ce 0a 	call	0x159c	; 0x159c <__gesf2>
     d8c:	18 16       	cp	r1, r24
     d8e:	4c f5       	brge	.+82     	; 0xde2 <LCD_sendCommand+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	40 e2       	ldi	r20, 0x20	; 32
     d96:	51 e4       	ldi	r21, 0x41	; 65
     d98:	69 85       	ldd	r22, Y+9	; 0x09
     d9a:	7a 85       	ldd	r23, Y+10	; 0x0a
     d9c:	8b 85       	ldd	r24, Y+11	; 0x0b
     d9e:	9c 85       	ldd	r25, Y+12	; 0x0c
     da0:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__mulsf3>
     da4:	dc 01       	movw	r26, r24
     da6:	cb 01       	movw	r24, r22
     da8:	bc 01       	movw	r22, r24
     daa:	cd 01       	movw	r24, r26
     dac:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__fixunssfsi>
     db0:	dc 01       	movw	r26, r24
     db2:	cb 01       	movw	r24, r22
     db4:	98 a3       	std	Y+32, r25	; 0x20
     db6:	8f 8f       	std	Y+31, r24	; 0x1f
     db8:	0f c0       	rjmp	.+30     	; 0xdd8 <LCD_sendCommand+0x2d0>
     dba:	89 e1       	ldi	r24, 0x19	; 25
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	9a a3       	std	Y+34, r25	; 0x22
     dc0:	89 a3       	std	Y+33, r24	; 0x21
     dc2:	89 a1       	ldd	r24, Y+33	; 0x21
     dc4:	9a a1       	ldd	r25, Y+34	; 0x22
     dc6:	01 97       	sbiw	r24, 0x01	; 1
     dc8:	f1 f7       	brne	.-4      	; 0xdc6 <LCD_sendCommand+0x2be>
     dca:	9a a3       	std	Y+34, r25	; 0x22
     dcc:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dce:	8f 8d       	ldd	r24, Y+31	; 0x1f
     dd0:	98 a1       	ldd	r25, Y+32	; 0x20
     dd2:	01 97       	sbiw	r24, 0x01	; 1
     dd4:	98 a3       	std	Y+32, r25	; 0x20
     dd6:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dd8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     dda:	98 a1       	ldd	r25, Y+32	; 0x20
     ddc:	89 2b       	or	r24, r25
     dde:	69 f7       	brne	.-38     	; 0xdba <LCD_sendCommand+0x2b2>
     de0:	14 c0       	rjmp	.+40     	; 0xe0a <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     de2:	6b 8d       	ldd	r22, Y+27	; 0x1b
     de4:	7c 8d       	ldd	r23, Y+28	; 0x1c
     de6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     de8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     dea:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__fixunssfsi>
     dee:	dc 01       	movw	r26, r24
     df0:	cb 01       	movw	r24, r22
     df2:	98 a3       	std	Y+32, r25	; 0x20
     df4:	8f 8f       	std	Y+31, r24	; 0x1f
     df6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     df8:	98 a1       	ldd	r25, Y+32	; 0x20
     dfa:	9c a3       	std	Y+36, r25	; 0x24
     dfc:	8b a3       	std	Y+35, r24	; 0x23
     dfe:	8b a1       	ldd	r24, Y+35	; 0x23
     e00:	9c a1       	ldd	r25, Y+36	; 0x24
     e02:	01 97       	sbiw	r24, 0x01	; 1
     e04:	f1 f7       	brne	.-4      	; 0xe02 <LCD_sendCommand+0x2fa>
     e06:	9c a3       	std	Y+36, r25	; 0x24
     e08:	8b a3       	std	Y+35, r24	; 0x23
	#endif
	_delay_ms(1);					/*for write timing diagram*/
	CLEAR_BIT(LCD_CTRL_OUT , E);	/*for write timing diagram*/
     e0a:	82 e3       	ldi	r24, 0x32	; 50
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	22 e3       	ldi	r18, 0x32	; 50
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	f9 01       	movw	r30, r18
     e14:	20 81       	ld	r18, Z
     e16:	2b 7f       	andi	r18, 0xFB	; 251
     e18:	fc 01       	movw	r30, r24
     e1a:	20 83       	st	Z, r18
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	a0 e8       	ldi	r26, 0x80	; 128
     e22:	bf e3       	ldi	r27, 0x3F	; 63
     e24:	8d 87       	std	Y+13, r24	; 0x0d
     e26:	9e 87       	std	Y+14, r25	; 0x0e
     e28:	af 87       	std	Y+15, r26	; 0x0f
     e2a:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	4a e7       	ldi	r20, 0x7A	; 122
     e32:	53 e4       	ldi	r21, 0x43	; 67
     e34:	6d 85       	ldd	r22, Y+13	; 0x0d
     e36:	7e 85       	ldd	r23, Y+14	; 0x0e
     e38:	8f 85       	ldd	r24, Y+15	; 0x0f
     e3a:	98 89       	ldd	r25, Y+16	; 0x10
     e3c:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__mulsf3>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	89 8b       	std	Y+17, r24	; 0x11
     e46:	9a 8b       	std	Y+18, r25	; 0x12
     e48:	ab 8b       	std	Y+19, r26	; 0x13
     e4a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	40 e8       	ldi	r20, 0x80	; 128
     e52:	5f e3       	ldi	r21, 0x3F	; 63
     e54:	69 89       	ldd	r22, Y+17	; 0x11
     e56:	7a 89       	ldd	r23, Y+18	; 0x12
     e58:	8b 89       	ldd	r24, Y+19	; 0x13
     e5a:	9c 89       	ldd	r25, Y+20	; 0x14
     e5c:	0e 94 4d 0a 	call	0x149a	; 0x149a <__cmpsf2>
     e60:	88 23       	and	r24, r24
     e62:	2c f4       	brge	.+10     	; 0xe6e <LCD_sendCommand+0x366>
		__ticks = 1;
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	9e 8b       	std	Y+22, r25	; 0x16
     e6a:	8d 8b       	std	Y+21, r24	; 0x15
     e6c:	3f c0       	rjmp	.+126    	; 0xeec <LCD_sendCommand+0x3e4>
	else if (__tmp > 65535)
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	3f ef       	ldi	r19, 0xFF	; 255
     e72:	4f e7       	ldi	r20, 0x7F	; 127
     e74:	57 e4       	ldi	r21, 0x47	; 71
     e76:	69 89       	ldd	r22, Y+17	; 0x11
     e78:	7a 89       	ldd	r23, Y+18	; 0x12
     e7a:	8b 89       	ldd	r24, Y+19	; 0x13
     e7c:	9c 89       	ldd	r25, Y+20	; 0x14
     e7e:	0e 94 ce 0a 	call	0x159c	; 0x159c <__gesf2>
     e82:	18 16       	cp	r1, r24
     e84:	4c f5       	brge	.+82     	; 0xed8 <LCD_sendCommand+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	40 e2       	ldi	r20, 0x20	; 32
     e8c:	51 e4       	ldi	r21, 0x41	; 65
     e8e:	6d 85       	ldd	r22, Y+13	; 0x0d
     e90:	7e 85       	ldd	r23, Y+14	; 0x0e
     e92:	8f 85       	ldd	r24, Y+15	; 0x0f
     e94:	98 89       	ldd	r25, Y+16	; 0x10
     e96:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__mulsf3>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	bc 01       	movw	r22, r24
     ea0:	cd 01       	movw	r24, r26
     ea2:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__fixunssfsi>
     ea6:	dc 01       	movw	r26, r24
     ea8:	cb 01       	movw	r24, r22
     eaa:	9e 8b       	std	Y+22, r25	; 0x16
     eac:	8d 8b       	std	Y+21, r24	; 0x15
     eae:	0f c0       	rjmp	.+30     	; 0xece <LCD_sendCommand+0x3c6>
     eb0:	89 e1       	ldi	r24, 0x19	; 25
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	98 8f       	std	Y+24, r25	; 0x18
     eb6:	8f 8b       	std	Y+23, r24	; 0x17
     eb8:	8f 89       	ldd	r24, Y+23	; 0x17
     eba:	98 8d       	ldd	r25, Y+24	; 0x18
     ebc:	01 97       	sbiw	r24, 0x01	; 1
     ebe:	f1 f7       	brne	.-4      	; 0xebc <LCD_sendCommand+0x3b4>
     ec0:	98 8f       	std	Y+24, r25	; 0x18
     ec2:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ec4:	8d 89       	ldd	r24, Y+21	; 0x15
     ec6:	9e 89       	ldd	r25, Y+22	; 0x16
     ec8:	01 97       	sbiw	r24, 0x01	; 1
     eca:	9e 8b       	std	Y+22, r25	; 0x16
     ecc:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ece:	8d 89       	ldd	r24, Y+21	; 0x15
     ed0:	9e 89       	ldd	r25, Y+22	; 0x16
     ed2:	89 2b       	or	r24, r25
     ed4:	69 f7       	brne	.-38     	; 0xeb0 <LCD_sendCommand+0x3a8>
	_delay_ms(1);					/*for write timing diagram*/
}
     ed6:	14 c0       	rjmp	.+40     	; 0xf00 <LCD_sendCommand+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ed8:	69 89       	ldd	r22, Y+17	; 0x11
     eda:	7a 89       	ldd	r23, Y+18	; 0x12
     edc:	8b 89       	ldd	r24, Y+19	; 0x13
     ede:	9c 89       	ldd	r25, Y+20	; 0x14
     ee0:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__fixunssfsi>
     ee4:	dc 01       	movw	r26, r24
     ee6:	cb 01       	movw	r24, r22
     ee8:	9e 8b       	std	Y+22, r25	; 0x16
     eea:	8d 8b       	std	Y+21, r24	; 0x15
     eec:	8d 89       	ldd	r24, Y+21	; 0x15
     eee:	9e 89       	ldd	r25, Y+22	; 0x16
     ef0:	9a 8f       	std	Y+26, r25	; 0x1a
     ef2:	89 8f       	std	Y+25, r24	; 0x19
     ef4:	89 8d       	ldd	r24, Y+25	; 0x19
     ef6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	f1 f7       	brne	.-4      	; 0xef8 <LCD_sendCommand+0x3f0>
     efc:	9a 8f       	std	Y+26, r25	; 0x1a
     efe:	89 8f       	std	Y+25, r24	; 0x19
     f00:	00 00       	nop
     f02:	e9 96       	adiw	r28, 0x39	; 57
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	f8 94       	cli
     f08:	de bf       	out	0x3e, r29	; 62
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	cd bf       	out	0x3d, r28	; 61
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	08 95       	ret

00000f14 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 a_data)
{
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	e9 97       	sbiw	r28, 0x39	; 57
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	89 af       	std	Y+57, r24	; 0x39
	/*function definition*/
	SET_BIT(LCD_CTRL_OUT , RS);	/*for command mode*/
     f2a:	82 e3       	ldi	r24, 0x32	; 50
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	22 e3       	ldi	r18, 0x32	; 50
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	f9 01       	movw	r30, r18
     f34:	20 81       	ld	r18, Z
     f36:	21 60       	ori	r18, 0x01	; 1
     f38:	fc 01       	movw	r30, r24
     f3a:	20 83       	st	Z, r18
	CLEAR_BIT(LCD_CTRL_OUT , RW);	/*for write mode*/
     f3c:	82 e3       	ldi	r24, 0x32	; 50
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	22 e3       	ldi	r18, 0x32	; 50
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	f9 01       	movw	r30, r18
     f46:	20 81       	ld	r18, Z
     f48:	2d 7f       	andi	r18, 0xFD	; 253
     f4a:	fc 01       	movw	r30, r24
     f4c:	20 83       	st	Z, r18
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	a0 e8       	ldi	r26, 0x80	; 128
     f54:	bf e3       	ldi	r27, 0x3F	; 63
     f56:	89 83       	std	Y+1, r24	; 0x01
     f58:	9a 83       	std	Y+2, r25	; 0x02
     f5a:	ab 83       	std	Y+3, r26	; 0x03
     f5c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	4a e7       	ldi	r20, 0x7A	; 122
     f64:	53 e4       	ldi	r21, 0x43	; 67
     f66:	69 81       	ldd	r22, Y+1	; 0x01
     f68:	7a 81       	ldd	r23, Y+2	; 0x02
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	9c 81       	ldd	r25, Y+4	; 0x04
     f6e:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__mulsf3>
     f72:	dc 01       	movw	r26, r24
     f74:	cb 01       	movw	r24, r22
     f76:	8f a7       	std	Y+47, r24	; 0x2f
     f78:	98 ab       	std	Y+48, r25	; 0x30
     f7a:	a9 ab       	std	Y+49, r26	; 0x31
     f7c:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	40 e8       	ldi	r20, 0x80	; 128
     f84:	5f e3       	ldi	r21, 0x3F	; 63
     f86:	6f a5       	ldd	r22, Y+47	; 0x2f
     f88:	78 a9       	ldd	r23, Y+48	; 0x30
     f8a:	89 a9       	ldd	r24, Y+49	; 0x31
     f8c:	9a a9       	ldd	r25, Y+50	; 0x32
     f8e:	0e 94 4d 0a 	call	0x149a	; 0x149a <__cmpsf2>
     f92:	88 23       	and	r24, r24
     f94:	2c f4       	brge	.+10     	; 0xfa0 <LCD_displayCharacter+0x8c>
		__ticks = 1;
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	9c ab       	std	Y+52, r25	; 0x34
     f9c:	8b ab       	std	Y+51, r24	; 0x33
     f9e:	3f c0       	rjmp	.+126    	; 0x101e <LCD_displayCharacter+0x10a>
	else if (__tmp > 65535)
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	3f ef       	ldi	r19, 0xFF	; 255
     fa4:	4f e7       	ldi	r20, 0x7F	; 127
     fa6:	57 e4       	ldi	r21, 0x47	; 71
     fa8:	6f a5       	ldd	r22, Y+47	; 0x2f
     faa:	78 a9       	ldd	r23, Y+48	; 0x30
     fac:	89 a9       	ldd	r24, Y+49	; 0x31
     fae:	9a a9       	ldd	r25, Y+50	; 0x32
     fb0:	0e 94 ce 0a 	call	0x159c	; 0x159c <__gesf2>
     fb4:	18 16       	cp	r1, r24
     fb6:	4c f5       	brge	.+82     	; 0x100a <LCD_displayCharacter+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fb8:	20 e0       	ldi	r18, 0x00	; 0
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	40 e2       	ldi	r20, 0x20	; 32
     fbe:	51 e4       	ldi	r21, 0x41	; 65
     fc0:	69 81       	ldd	r22, Y+1	; 0x01
     fc2:	7a 81       	ldd	r23, Y+2	; 0x02
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	9c 81       	ldd	r25, Y+4	; 0x04
     fc8:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__mulsf3>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	bc 01       	movw	r22, r24
     fd2:	cd 01       	movw	r24, r26
     fd4:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__fixunssfsi>
     fd8:	dc 01       	movw	r26, r24
     fda:	cb 01       	movw	r24, r22
     fdc:	9c ab       	std	Y+52, r25	; 0x34
     fde:	8b ab       	std	Y+51, r24	; 0x33
     fe0:	0f c0       	rjmp	.+30     	; 0x1000 <LCD_displayCharacter+0xec>
     fe2:	89 e1       	ldi	r24, 0x19	; 25
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	9e ab       	std	Y+54, r25	; 0x36
     fe8:	8d ab       	std	Y+53, r24	; 0x35
     fea:	8d a9       	ldd	r24, Y+53	; 0x35
     fec:	9e a9       	ldd	r25, Y+54	; 0x36
     fee:	01 97       	sbiw	r24, 0x01	; 1
     ff0:	f1 f7       	brne	.-4      	; 0xfee <LCD_displayCharacter+0xda>
     ff2:	9e ab       	std	Y+54, r25	; 0x36
     ff4:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff6:	8b a9       	ldd	r24, Y+51	; 0x33
     ff8:	9c a9       	ldd	r25, Y+52	; 0x34
     ffa:	01 97       	sbiw	r24, 0x01	; 1
     ffc:	9c ab       	std	Y+52, r25	; 0x34
     ffe:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1000:	8b a9       	ldd	r24, Y+51	; 0x33
    1002:	9c a9       	ldd	r25, Y+52	; 0x34
    1004:	89 2b       	or	r24, r25
    1006:	69 f7       	brne	.-38     	; 0xfe2 <LCD_displayCharacter+0xce>
    1008:	14 c0       	rjmp	.+40     	; 0x1032 <LCD_displayCharacter+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    100a:	6f a5       	ldd	r22, Y+47	; 0x2f
    100c:	78 a9       	ldd	r23, Y+48	; 0x30
    100e:	89 a9       	ldd	r24, Y+49	; 0x31
    1010:	9a a9       	ldd	r25, Y+50	; 0x32
    1012:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__fixunssfsi>
    1016:	dc 01       	movw	r26, r24
    1018:	cb 01       	movw	r24, r22
    101a:	9c ab       	std	Y+52, r25	; 0x34
    101c:	8b ab       	std	Y+51, r24	; 0x33
    101e:	8b a9       	ldd	r24, Y+51	; 0x33
    1020:	9c a9       	ldd	r25, Y+52	; 0x34
    1022:	98 af       	std	Y+56, r25	; 0x38
    1024:	8f ab       	std	Y+55, r24	; 0x37
    1026:	8f a9       	ldd	r24, Y+55	; 0x37
    1028:	98 ad       	ldd	r25, Y+56	; 0x38
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	f1 f7       	brne	.-4      	; 0x102a <LCD_displayCharacter+0x116>
    102e:	98 af       	std	Y+56, r25	; 0x38
    1030:	8f ab       	std	Y+55, r24	; 0x37
	_delay_ms(1);					/*for write timing diagram*/
	SET_BIT(LCD_CTRL_OUT , E);		/*to enable the lcd*/
    1032:	82 e3       	ldi	r24, 0x32	; 50
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	22 e3       	ldi	r18, 0x32	; 50
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	f9 01       	movw	r30, r18
    103c:	20 81       	ld	r18, Z
    103e:	24 60       	ori	r18, 0x04	; 4
    1040:	fc 01       	movw	r30, r24
    1042:	20 83       	st	Z, r18
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	a0 e8       	ldi	r26, 0x80	; 128
    104a:	bf e3       	ldi	r27, 0x3F	; 63
    104c:	8d 83       	std	Y+5, r24	; 0x05
    104e:	9e 83       	std	Y+6, r25	; 0x06
    1050:	af 83       	std	Y+7, r26	; 0x07
    1052:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	4a e7       	ldi	r20, 0x7A	; 122
    105a:	53 e4       	ldi	r21, 0x43	; 67
    105c:	6d 81       	ldd	r22, Y+5	; 0x05
    105e:	7e 81       	ldd	r23, Y+6	; 0x06
    1060:	8f 81       	ldd	r24, Y+7	; 0x07
    1062:	98 85       	ldd	r25, Y+8	; 0x08
    1064:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__mulsf3>
    1068:	dc 01       	movw	r26, r24
    106a:	cb 01       	movw	r24, r22
    106c:	8d a3       	std	Y+37, r24	; 0x25
    106e:	9e a3       	std	Y+38, r25	; 0x26
    1070:	af a3       	std	Y+39, r26	; 0x27
    1072:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
    1074:	20 e0       	ldi	r18, 0x00	; 0
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	40 e8       	ldi	r20, 0x80	; 128
    107a:	5f e3       	ldi	r21, 0x3F	; 63
    107c:	6d a1       	ldd	r22, Y+37	; 0x25
    107e:	7e a1       	ldd	r23, Y+38	; 0x26
    1080:	8f a1       	ldd	r24, Y+39	; 0x27
    1082:	98 a5       	ldd	r25, Y+40	; 0x28
    1084:	0e 94 4d 0a 	call	0x149a	; 0x149a <__cmpsf2>
    1088:	88 23       	and	r24, r24
    108a:	2c f4       	brge	.+10     	; 0x1096 <LCD_displayCharacter+0x182>
		__ticks = 1;
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	9a a7       	std	Y+42, r25	; 0x2a
    1092:	89 a7       	std	Y+41, r24	; 0x29
    1094:	3f c0       	rjmp	.+126    	; 0x1114 <LCD_displayCharacter+0x200>
	else if (__tmp > 65535)
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	3f ef       	ldi	r19, 0xFF	; 255
    109a:	4f e7       	ldi	r20, 0x7F	; 127
    109c:	57 e4       	ldi	r21, 0x47	; 71
    109e:	6d a1       	ldd	r22, Y+37	; 0x25
    10a0:	7e a1       	ldd	r23, Y+38	; 0x26
    10a2:	8f a1       	ldd	r24, Y+39	; 0x27
    10a4:	98 a5       	ldd	r25, Y+40	; 0x28
    10a6:	0e 94 ce 0a 	call	0x159c	; 0x159c <__gesf2>
    10aa:	18 16       	cp	r1, r24
    10ac:	4c f5       	brge	.+82     	; 0x1100 <LCD_displayCharacter+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	40 e2       	ldi	r20, 0x20	; 32
    10b4:	51 e4       	ldi	r21, 0x41	; 65
    10b6:	6d 81       	ldd	r22, Y+5	; 0x05
    10b8:	7e 81       	ldd	r23, Y+6	; 0x06
    10ba:	8f 81       	ldd	r24, Y+7	; 0x07
    10bc:	98 85       	ldd	r25, Y+8	; 0x08
    10be:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__mulsf3>
    10c2:	dc 01       	movw	r26, r24
    10c4:	cb 01       	movw	r24, r22
    10c6:	bc 01       	movw	r22, r24
    10c8:	cd 01       	movw	r24, r26
    10ca:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__fixunssfsi>
    10ce:	dc 01       	movw	r26, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	9a a7       	std	Y+42, r25	; 0x2a
    10d4:	89 a7       	std	Y+41, r24	; 0x29
    10d6:	0f c0       	rjmp	.+30     	; 0x10f6 <LCD_displayCharacter+0x1e2>
    10d8:	89 e1       	ldi	r24, 0x19	; 25
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	9c a7       	std	Y+44, r25	; 0x2c
    10de:	8b a7       	std	Y+43, r24	; 0x2b
    10e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    10e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	f1 f7       	brne	.-4      	; 0x10e4 <LCD_displayCharacter+0x1d0>
    10e8:	9c a7       	std	Y+44, r25	; 0x2c
    10ea:	8b a7       	std	Y+43, r24	; 0x2b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ec:	89 a5       	ldd	r24, Y+41	; 0x29
    10ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    10f0:	01 97       	sbiw	r24, 0x01	; 1
    10f2:	9a a7       	std	Y+42, r25	; 0x2a
    10f4:	89 a7       	std	Y+41, r24	; 0x29
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10f6:	89 a5       	ldd	r24, Y+41	; 0x29
    10f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    10fa:	89 2b       	or	r24, r25
    10fc:	69 f7       	brne	.-38     	; 0x10d8 <LCD_displayCharacter+0x1c4>
    10fe:	14 c0       	rjmp	.+40     	; 0x1128 <LCD_displayCharacter+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1100:	6d a1       	ldd	r22, Y+37	; 0x25
    1102:	7e a1       	ldd	r23, Y+38	; 0x26
    1104:	8f a1       	ldd	r24, Y+39	; 0x27
    1106:	98 a5       	ldd	r25, Y+40	; 0x28
    1108:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__fixunssfsi>
    110c:	dc 01       	movw	r26, r24
    110e:	cb 01       	movw	r24, r22
    1110:	9a a7       	std	Y+42, r25	; 0x2a
    1112:	89 a7       	std	Y+41, r24	; 0x29
    1114:	89 a5       	ldd	r24, Y+41	; 0x29
    1116:	9a a5       	ldd	r25, Y+42	; 0x2a
    1118:	9e a7       	std	Y+46, r25	; 0x2e
    111a:	8d a7       	std	Y+45, r24	; 0x2d
    111c:	8d a5       	ldd	r24, Y+45	; 0x2d
    111e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	f1 f7       	brne	.-4      	; 0x1120 <LCD_displayCharacter+0x20c>
    1124:	9e a7       	std	Y+46, r25	; 0x2e
    1126:	8d a7       	std	Y+45, r24	; 0x2d
	PUT_UPPER_IN_UPPER(LCD_DATA_OUT , a_data);
	#else
	PUT_UPPER_IN_LOWER(LCD_DATA_OUT , a_data);
	#endif
	#else
	LCD_DATA_OUT = a_data;			/*out the command variable*/
    1128:	85 e3       	ldi	r24, 0x35	; 53
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	29 ad       	ldd	r18, Y+57	; 0x39
    112e:	fc 01       	movw	r30, r24
    1130:	20 83       	st	Z, r18
    1132:	80 e0       	ldi	r24, 0x00	; 0
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	a0 e8       	ldi	r26, 0x80	; 128
    1138:	bf e3       	ldi	r27, 0x3F	; 63
    113a:	89 87       	std	Y+9, r24	; 0x09
    113c:	9a 87       	std	Y+10, r25	; 0x0a
    113e:	ab 87       	std	Y+11, r26	; 0x0b
    1140:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1142:	20 e0       	ldi	r18, 0x00	; 0
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	4a e7       	ldi	r20, 0x7A	; 122
    1148:	53 e4       	ldi	r21, 0x43	; 67
    114a:	69 85       	ldd	r22, Y+9	; 0x09
    114c:	7a 85       	ldd	r23, Y+10	; 0x0a
    114e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1150:	9c 85       	ldd	r25, Y+12	; 0x0c
    1152:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__mulsf3>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	8b 8f       	std	Y+27, r24	; 0x1b
    115c:	9c 8f       	std	Y+28, r25	; 0x1c
    115e:	ad 8f       	std	Y+29, r26	; 0x1d
    1160:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	40 e8       	ldi	r20, 0x80	; 128
    1168:	5f e3       	ldi	r21, 0x3F	; 63
    116a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    116c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    116e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1170:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1172:	0e 94 4d 0a 	call	0x149a	; 0x149a <__cmpsf2>
    1176:	88 23       	and	r24, r24
    1178:	2c f4       	brge	.+10     	; 0x1184 <LCD_displayCharacter+0x270>
		__ticks = 1;
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	98 a3       	std	Y+32, r25	; 0x20
    1180:	8f 8f       	std	Y+31, r24	; 0x1f
    1182:	3f c0       	rjmp	.+126    	; 0x1202 <LCD_displayCharacter+0x2ee>
	else if (__tmp > 65535)
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	3f ef       	ldi	r19, 0xFF	; 255
    1188:	4f e7       	ldi	r20, 0x7F	; 127
    118a:	57 e4       	ldi	r21, 0x47	; 71
    118c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    118e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1190:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1192:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1194:	0e 94 ce 0a 	call	0x159c	; 0x159c <__gesf2>
    1198:	18 16       	cp	r1, r24
    119a:	4c f5       	brge	.+82     	; 0x11ee <LCD_displayCharacter+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	40 e2       	ldi	r20, 0x20	; 32
    11a2:	51 e4       	ldi	r21, 0x41	; 65
    11a4:	69 85       	ldd	r22, Y+9	; 0x09
    11a6:	7a 85       	ldd	r23, Y+10	; 0x0a
    11a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    11aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    11ac:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__mulsf3>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	bc 01       	movw	r22, r24
    11b6:	cd 01       	movw	r24, r26
    11b8:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__fixunssfsi>
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	98 a3       	std	Y+32, r25	; 0x20
    11c2:	8f 8f       	std	Y+31, r24	; 0x1f
    11c4:	0f c0       	rjmp	.+30     	; 0x11e4 <LCD_displayCharacter+0x2d0>
    11c6:	89 e1       	ldi	r24, 0x19	; 25
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	9a a3       	std	Y+34, r25	; 0x22
    11cc:	89 a3       	std	Y+33, r24	; 0x21
    11ce:	89 a1       	ldd	r24, Y+33	; 0x21
    11d0:	9a a1       	ldd	r25, Y+34	; 0x22
    11d2:	01 97       	sbiw	r24, 0x01	; 1
    11d4:	f1 f7       	brne	.-4      	; 0x11d2 <LCD_displayCharacter+0x2be>
    11d6:	9a a3       	std	Y+34, r25	; 0x22
    11d8:	89 a3       	std	Y+33, r24	; 0x21
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11da:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11dc:	98 a1       	ldd	r25, Y+32	; 0x20
    11de:	01 97       	sbiw	r24, 0x01	; 1
    11e0:	98 a3       	std	Y+32, r25	; 0x20
    11e2:	8f 8f       	std	Y+31, r24	; 0x1f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11e6:	98 a1       	ldd	r25, Y+32	; 0x20
    11e8:	89 2b       	or	r24, r25
    11ea:	69 f7       	brne	.-38     	; 0x11c6 <LCD_displayCharacter+0x2b2>
    11ec:	14 c0       	rjmp	.+40     	; 0x1216 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11ee:	6b 8d       	ldd	r22, Y+27	; 0x1b
    11f0:	7c 8d       	ldd	r23, Y+28	; 0x1c
    11f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11f6:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__fixunssfsi>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	98 a3       	std	Y+32, r25	; 0x20
    1200:	8f 8f       	std	Y+31, r24	; 0x1f
    1202:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1204:	98 a1       	ldd	r25, Y+32	; 0x20
    1206:	9c a3       	std	Y+36, r25	; 0x24
    1208:	8b a3       	std	Y+35, r24	; 0x23
    120a:	8b a1       	ldd	r24, Y+35	; 0x23
    120c:	9c a1       	ldd	r25, Y+36	; 0x24
    120e:	01 97       	sbiw	r24, 0x01	; 1
    1210:	f1 f7       	brne	.-4      	; 0x120e <LCD_displayCharacter+0x2fa>
    1212:	9c a3       	std	Y+36, r25	; 0x24
    1214:	8b a3       	std	Y+35, r24	; 0x23
	#endif
	_delay_ms(1);					/*for write timing diagram*/
	CLEAR_BIT(LCD_CTRL_OUT , E);	/*for write timing diagram*/
    1216:	82 e3       	ldi	r24, 0x32	; 50
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	22 e3       	ldi	r18, 0x32	; 50
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	f9 01       	movw	r30, r18
    1220:	20 81       	ld	r18, Z
    1222:	2b 7f       	andi	r18, 0xFB	; 251
    1224:	fc 01       	movw	r30, r24
    1226:	20 83       	st	Z, r18
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	a0 e8       	ldi	r26, 0x80	; 128
    122e:	bf e3       	ldi	r27, 0x3F	; 63
    1230:	8d 87       	std	Y+13, r24	; 0x0d
    1232:	9e 87       	std	Y+14, r25	; 0x0e
    1234:	af 87       	std	Y+15, r26	; 0x0f
    1236:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	4a e7       	ldi	r20, 0x7A	; 122
    123e:	53 e4       	ldi	r21, 0x43	; 67
    1240:	6d 85       	ldd	r22, Y+13	; 0x0d
    1242:	7e 85       	ldd	r23, Y+14	; 0x0e
    1244:	8f 85       	ldd	r24, Y+15	; 0x0f
    1246:	98 89       	ldd	r25, Y+16	; 0x10
    1248:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__mulsf3>
    124c:	dc 01       	movw	r26, r24
    124e:	cb 01       	movw	r24, r22
    1250:	89 8b       	std	Y+17, r24	; 0x11
    1252:	9a 8b       	std	Y+18, r25	; 0x12
    1254:	ab 8b       	std	Y+19, r26	; 0x13
    1256:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	40 e8       	ldi	r20, 0x80	; 128
    125e:	5f e3       	ldi	r21, 0x3F	; 63
    1260:	69 89       	ldd	r22, Y+17	; 0x11
    1262:	7a 89       	ldd	r23, Y+18	; 0x12
    1264:	8b 89       	ldd	r24, Y+19	; 0x13
    1266:	9c 89       	ldd	r25, Y+20	; 0x14
    1268:	0e 94 4d 0a 	call	0x149a	; 0x149a <__cmpsf2>
    126c:	88 23       	and	r24, r24
    126e:	2c f4       	brge	.+10     	; 0x127a <LCD_displayCharacter+0x366>
		__ticks = 1;
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	9e 8b       	std	Y+22, r25	; 0x16
    1276:	8d 8b       	std	Y+21, r24	; 0x15
    1278:	3f c0       	rjmp	.+126    	; 0x12f8 <LCD_displayCharacter+0x3e4>
	else if (__tmp > 65535)
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	3f ef       	ldi	r19, 0xFF	; 255
    127e:	4f e7       	ldi	r20, 0x7F	; 127
    1280:	57 e4       	ldi	r21, 0x47	; 71
    1282:	69 89       	ldd	r22, Y+17	; 0x11
    1284:	7a 89       	ldd	r23, Y+18	; 0x12
    1286:	8b 89       	ldd	r24, Y+19	; 0x13
    1288:	9c 89       	ldd	r25, Y+20	; 0x14
    128a:	0e 94 ce 0a 	call	0x159c	; 0x159c <__gesf2>
    128e:	18 16       	cp	r1, r24
    1290:	4c f5       	brge	.+82     	; 0x12e4 <LCD_displayCharacter+0x3d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	40 e2       	ldi	r20, 0x20	; 32
    1298:	51 e4       	ldi	r21, 0x41	; 65
    129a:	6d 85       	ldd	r22, Y+13	; 0x0d
    129c:	7e 85       	ldd	r23, Y+14	; 0x0e
    129e:	8f 85       	ldd	r24, Y+15	; 0x0f
    12a0:	98 89       	ldd	r25, Y+16	; 0x10
    12a2:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__mulsf3>
    12a6:	dc 01       	movw	r26, r24
    12a8:	cb 01       	movw	r24, r22
    12aa:	bc 01       	movw	r22, r24
    12ac:	cd 01       	movw	r24, r26
    12ae:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__fixunssfsi>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	9e 8b       	std	Y+22, r25	; 0x16
    12b8:	8d 8b       	std	Y+21, r24	; 0x15
    12ba:	0f c0       	rjmp	.+30     	; 0x12da <LCD_displayCharacter+0x3c6>
    12bc:	89 e1       	ldi	r24, 0x19	; 25
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	98 8f       	std	Y+24, r25	; 0x18
    12c2:	8f 8b       	std	Y+23, r24	; 0x17
    12c4:	8f 89       	ldd	r24, Y+23	; 0x17
    12c6:	98 8d       	ldd	r25, Y+24	; 0x18
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	f1 f7       	brne	.-4      	; 0x12c8 <LCD_displayCharacter+0x3b4>
    12cc:	98 8f       	std	Y+24, r25	; 0x18
    12ce:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12d0:	8d 89       	ldd	r24, Y+21	; 0x15
    12d2:	9e 89       	ldd	r25, Y+22	; 0x16
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	9e 8b       	std	Y+22, r25	; 0x16
    12d8:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12da:	8d 89       	ldd	r24, Y+21	; 0x15
    12dc:	9e 89       	ldd	r25, Y+22	; 0x16
    12de:	89 2b       	or	r24, r25
    12e0:	69 f7       	brne	.-38     	; 0x12bc <LCD_displayCharacter+0x3a8>
	_delay_ms(1);					/*for write timing diagram*/
}
    12e2:	14 c0       	rjmp	.+40     	; 0x130c <LCD_displayCharacter+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12e4:	69 89       	ldd	r22, Y+17	; 0x11
    12e6:	7a 89       	ldd	r23, Y+18	; 0x12
    12e8:	8b 89       	ldd	r24, Y+19	; 0x13
    12ea:	9c 89       	ldd	r25, Y+20	; 0x14
    12ec:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <__fixunssfsi>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	9e 8b       	std	Y+22, r25	; 0x16
    12f6:	8d 8b       	std	Y+21, r24	; 0x15
    12f8:	8d 89       	ldd	r24, Y+21	; 0x15
    12fa:	9e 89       	ldd	r25, Y+22	; 0x16
    12fc:	9a 8f       	std	Y+26, r25	; 0x1a
    12fe:	89 8f       	std	Y+25, r24	; 0x19
    1300:	89 8d       	ldd	r24, Y+25	; 0x19
    1302:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	f1 f7       	brne	.-4      	; 0x1304 <LCD_displayCharacter+0x3f0>
    1308:	9a 8f       	std	Y+26, r25	; 0x1a
    130a:	89 8f       	std	Y+25, r24	; 0x19
    130c:	00 00       	nop
    130e:	e9 96       	adiw	r28, 0x39	; 57
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	de bf       	out	0x3e, r29	; 62
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	cd bf       	out	0x3d, r28	; 61
    131a:	df 91       	pop	r29
    131c:	cf 91       	pop	r28
    131e:	08 95       	ret

00001320 <LCD_displayString>:

void LCD_displayString(const uint8 * str)
{
    1320:	cf 93       	push	r28
    1322:	df 93       	push	r29
    1324:	00 d0       	rcall	.+0      	; 0x1326 <LCD_displayString+0x6>
    1326:	1f 92       	push	r1
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	9b 83       	std	Y+3, r25	; 0x03
    132e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count = 0;
    1330:	19 82       	std	Y+1, r1	; 0x01
	while(str[count] != NULL)
    1332:	0e c0       	rjmp	.+28     	; 0x1350 <LCD_displayString+0x30>
	{
		LCD_displayCharacter(str[count]);
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	88 2f       	mov	r24, r24
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	2a 81       	ldd	r18, Y+2	; 0x02
    133c:	3b 81       	ldd	r19, Y+3	; 0x03
    133e:	82 0f       	add	r24, r18
    1340:	93 1f       	adc	r25, r19
    1342:	fc 01       	movw	r30, r24
    1344:	80 81       	ld	r24, Z
    1346:	0e 94 8a 07 	call	0xf14	; 0xf14 <LCD_displayCharacter>
		count++;
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	8f 5f       	subi	r24, 0xFF	; 255
    134e:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const uint8 * str)
{
	uint8 count = 0;
	while(str[count] != NULL)
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	88 2f       	mov	r24, r24
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	2a 81       	ldd	r18, Y+2	; 0x02
    1358:	3b 81       	ldd	r19, Y+3	; 0x03
    135a:	82 0f       	add	r24, r18
    135c:	93 1f       	adc	r25, r19
    135e:	fc 01       	movw	r30, r24
    1360:	80 81       	ld	r24, Z
    1362:	88 2f       	mov	r24, r24
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	89 2b       	or	r24, r25
    1368:	29 f7       	brne	.-54     	; 0x1334 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[count]);
		count++;
	}
}
    136a:	00 00       	nop
    136c:	0f 90       	pop	r0
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	08 95       	ret

00001378 <LCD_goToColRow>:

void LCD_goToColRow(uint8 row , uint8 col)
{
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	00 d0       	rcall	.+0      	; 0x137e <LCD_goToColRow+0x6>
    137e:	1f 92       	push	r1
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	8a 83       	std	Y+2, r24	; 0x02
    1386:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch(row)
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	88 2f       	mov	r24, r24
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	91 05       	cpc	r25, r1
    1392:	79 f0       	breq	.+30     	; 0x13b2 <LCD_goToColRow+0x3a>
    1394:	82 30       	cpi	r24, 0x02	; 2
    1396:	91 05       	cpc	r25, r1
    1398:	1c f4       	brge	.+6      	; 0x13a0 <LCD_goToColRow+0x28>
    139a:	89 2b       	or	r24, r25
    139c:	39 f0       	breq	.+14     	; 0x13ac <LCD_goToColRow+0x34>
    139e:	15 c0       	rjmp	.+42     	; 0x13ca <LCD_goToColRow+0x52>
    13a0:	82 30       	cpi	r24, 0x02	; 2
    13a2:	91 05       	cpc	r25, r1
    13a4:	51 f0       	breq	.+20     	; 0x13ba <LCD_goToColRow+0x42>
    13a6:	03 97       	sbiw	r24, 0x03	; 3
    13a8:	61 f0       	breq	.+24     	; 0x13c2 <LCD_goToColRow+0x4a>
    13aa:	0f c0       	rjmp	.+30     	; 0x13ca <LCD_goToColRow+0x52>
	{
	case 0 :
		address = col;
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	89 83       	std	Y+1, r24	; 0x01
		break;
    13b0:	0c c0       	rjmp	.+24     	; 0x13ca <LCD_goToColRow+0x52>
	case 1 :
		address = 0x40 + col;
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	80 5c       	subi	r24, 0xC0	; 192
    13b6:	89 83       	std	Y+1, r24	; 0x01
		break;
    13b8:	08 c0       	rjmp	.+16     	; 0x13ca <LCD_goToColRow+0x52>
	case 2 :
		address = 0x10 + col;
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	80 5f       	subi	r24, 0xF0	; 240
    13be:	89 83       	std	Y+1, r24	; 0x01
		break;
    13c0:	04 c0       	rjmp	.+8      	; 0x13ca <LCD_goToColRow+0x52>
	case 3 :
		address = 0x50 + col;
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	80 5b       	subi	r24, 0xB0	; 176
    13c6:	89 83       	std	Y+1, r24	; 0x01
		break;
    13c8:	00 00       	nop
	}
	LCD_sendCommand(address | 0x80);
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	80 68       	ori	r24, 0x80	; 128
    13ce:	0e 94 84 05 	call	0xb08	; 0xb08 <LCD_sendCommand>
}
    13d2:	00 00       	nop
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	df 91       	pop	r29
    13dc:	cf 91       	pop	r28
    13de:	08 95       	ret

000013e0 <LCD_displayInt>:
void LCD_displayInt(int a_number)
{
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	62 97       	sbiw	r28, 0x12	; 18
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	9a 8b       	std	Y+18, r25	; 0x12
    13f6:	89 8b       	std	Y+17, r24	; 0x11
	char a_ascii[16];
	itoa(a_number , a_ascii , 10);
    13f8:	89 89       	ldd	r24, Y+17	; 0x11
    13fa:	9a 89       	ldd	r25, Y+18	; 0x12
    13fc:	4a e0       	ldi	r20, 0x0A	; 10
    13fe:	50 e0       	ldi	r21, 0x00	; 0
    1400:	9e 01       	movw	r18, r28
    1402:	2f 5f       	subi	r18, 0xFF	; 255
    1404:	3f 4f       	sbci	r19, 0xFF	; 255
    1406:	b9 01       	movw	r22, r18
    1408:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <itoa>
	LCD_displayString(a_ascii);
    140c:	ce 01       	movw	r24, r28
    140e:	01 96       	adiw	r24, 0x01	; 1
    1410:	0e 94 90 09 	call	0x1320	; 0x1320 <LCD_displayString>
}
    1414:	00 00       	nop
    1416:	62 96       	adiw	r28, 0x12	; 18
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	f8 94       	cli
    141c:	de bf       	out	0x3e, r29	; 62
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	cd bf       	out	0x3d, r28	; 61
    1422:	df 91       	pop	r29
    1424:	cf 91       	pop	r28
    1426:	08 95       	ret

00001428 <LCD_displayOnColRow>:

void LCD_displayOnColRow(uint8 row , uint8 col , const uint8 * str)
{
    1428:	cf 93       	push	r28
    142a:	df 93       	push	r29
    142c:	00 d0       	rcall	.+0      	; 0x142e <LCD_displayOnColRow+0x6>
    142e:	00 d0       	rcall	.+0      	; 0x1430 <LCD_displayOnColRow+0x8>
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
    1434:	89 83       	std	Y+1, r24	; 0x01
    1436:	6a 83       	std	Y+2, r22	; 0x02
    1438:	5c 83       	std	Y+4, r21	; 0x04
    143a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToColRow(row , col);
    143c:	6a 81       	ldd	r22, Y+2	; 0x02
    143e:	89 81       	ldd	r24, Y+1	; 0x01
    1440:	0e 94 bc 09 	call	0x1378	; 0x1378 <LCD_goToColRow>
	LCD_displayString(str);
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	9c 81       	ldd	r25, Y+4	; 0x04
    1448:	0e 94 90 09 	call	0x1320	; 0x1320 <LCD_displayString>
}
    144c:	00 00       	nop
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	08 95       	ret

0000145c <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_SCREEN);
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	0e 94 84 05 	call	0xb08	; 0xb08 <LCD_sendCommand>
}
    146a:	00 00       	nop
    146c:	df 91       	pop	r29
    146e:	cf 91       	pop	r28
    1470:	08 95       	ret

00001472 <__udivmodhi4>:
    1472:	aa 1b       	sub	r26, r26
    1474:	bb 1b       	sub	r27, r27
    1476:	51 e1       	ldi	r21, 0x11	; 17
    1478:	07 c0       	rjmp	.+14     	; 0x1488 <__udivmodhi4_ep>

0000147a <__udivmodhi4_loop>:
    147a:	aa 1f       	adc	r26, r26
    147c:	bb 1f       	adc	r27, r27
    147e:	a6 17       	cp	r26, r22
    1480:	b7 07       	cpc	r27, r23
    1482:	10 f0       	brcs	.+4      	; 0x1488 <__udivmodhi4_ep>
    1484:	a6 1b       	sub	r26, r22
    1486:	b7 0b       	sbc	r27, r23

00001488 <__udivmodhi4_ep>:
    1488:	88 1f       	adc	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	5a 95       	dec	r21
    148e:	a9 f7       	brne	.-22     	; 0x147a <__udivmodhi4_loop>
    1490:	80 95       	com	r24
    1492:	90 95       	com	r25
    1494:	bc 01       	movw	r22, r24
    1496:	cd 01       	movw	r24, r26
    1498:	08 95       	ret

0000149a <__cmpsf2>:
    149a:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fp_cmp>
    149e:	08 f4       	brcc	.+2      	; 0x14a2 <__cmpsf2+0x8>
    14a0:	81 e0       	ldi	r24, 0x01	; 1
    14a2:	08 95       	ret

000014a4 <__fixunssfsi>:
    14a4:	0e 94 ad 0a 	call	0x155a	; 0x155a <__fp_splitA>
    14a8:	88 f0       	brcs	.+34     	; 0x14cc <__fixunssfsi+0x28>
    14aa:	9f 57       	subi	r25, 0x7F	; 127
    14ac:	98 f0       	brcs	.+38     	; 0x14d4 <__fixunssfsi+0x30>
    14ae:	b9 2f       	mov	r27, r25
    14b0:	99 27       	eor	r25, r25
    14b2:	b7 51       	subi	r27, 0x17	; 23
    14b4:	b0 f0       	brcs	.+44     	; 0x14e2 <__fixunssfsi+0x3e>
    14b6:	e1 f0       	breq	.+56     	; 0x14f0 <__fixunssfsi+0x4c>
    14b8:	66 0f       	add	r22, r22
    14ba:	77 1f       	adc	r23, r23
    14bc:	88 1f       	adc	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	1a f0       	brmi	.+6      	; 0x14c8 <__fixunssfsi+0x24>
    14c2:	ba 95       	dec	r27
    14c4:	c9 f7       	brne	.-14     	; 0x14b8 <__fixunssfsi+0x14>
    14c6:	14 c0       	rjmp	.+40     	; 0x14f0 <__fixunssfsi+0x4c>
    14c8:	b1 30       	cpi	r27, 0x01	; 1
    14ca:	91 f0       	breq	.+36     	; 0x14f0 <__fixunssfsi+0x4c>
    14cc:	0e 94 c7 0a 	call	0x158e	; 0x158e <__fp_zero>
    14d0:	b1 e0       	ldi	r27, 0x01	; 1
    14d2:	08 95       	ret
    14d4:	0c 94 c7 0a 	jmp	0x158e	; 0x158e <__fp_zero>
    14d8:	67 2f       	mov	r22, r23
    14da:	78 2f       	mov	r23, r24
    14dc:	88 27       	eor	r24, r24
    14de:	b8 5f       	subi	r27, 0xF8	; 248
    14e0:	39 f0       	breq	.+14     	; 0x14f0 <__fixunssfsi+0x4c>
    14e2:	b9 3f       	cpi	r27, 0xF9	; 249
    14e4:	cc f3       	brlt	.-14     	; 0x14d8 <__fixunssfsi+0x34>
    14e6:	86 95       	lsr	r24
    14e8:	77 95       	ror	r23
    14ea:	67 95       	ror	r22
    14ec:	b3 95       	inc	r27
    14ee:	d9 f7       	brne	.-10     	; 0x14e6 <__fixunssfsi+0x42>
    14f0:	3e f4       	brtc	.+14     	; 0x1500 <__fixunssfsi+0x5c>
    14f2:	90 95       	com	r25
    14f4:	80 95       	com	r24
    14f6:	70 95       	com	r23
    14f8:	61 95       	neg	r22
    14fa:	7f 4f       	sbci	r23, 0xFF	; 255
    14fc:	8f 4f       	sbci	r24, 0xFF	; 255
    14fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1500:	08 95       	ret

00001502 <__fp_cmp>:
    1502:	99 0f       	add	r25, r25
    1504:	00 08       	sbc	r0, r0
    1506:	55 0f       	add	r21, r21
    1508:	aa 0b       	sbc	r26, r26
    150a:	e0 e8       	ldi	r30, 0x80	; 128
    150c:	fe ef       	ldi	r31, 0xFE	; 254
    150e:	16 16       	cp	r1, r22
    1510:	17 06       	cpc	r1, r23
    1512:	e8 07       	cpc	r30, r24
    1514:	f9 07       	cpc	r31, r25
    1516:	c0 f0       	brcs	.+48     	; 0x1548 <__fp_cmp+0x46>
    1518:	12 16       	cp	r1, r18
    151a:	13 06       	cpc	r1, r19
    151c:	e4 07       	cpc	r30, r20
    151e:	f5 07       	cpc	r31, r21
    1520:	98 f0       	brcs	.+38     	; 0x1548 <__fp_cmp+0x46>
    1522:	62 1b       	sub	r22, r18
    1524:	73 0b       	sbc	r23, r19
    1526:	84 0b       	sbc	r24, r20
    1528:	95 0b       	sbc	r25, r21
    152a:	39 f4       	brne	.+14     	; 0x153a <__fp_cmp+0x38>
    152c:	0a 26       	eor	r0, r26
    152e:	61 f0       	breq	.+24     	; 0x1548 <__fp_cmp+0x46>
    1530:	23 2b       	or	r18, r19
    1532:	24 2b       	or	r18, r20
    1534:	25 2b       	or	r18, r21
    1536:	21 f4       	brne	.+8      	; 0x1540 <__fp_cmp+0x3e>
    1538:	08 95       	ret
    153a:	0a 26       	eor	r0, r26
    153c:	09 f4       	brne	.+2      	; 0x1540 <__fp_cmp+0x3e>
    153e:	a1 40       	sbci	r26, 0x01	; 1
    1540:	a6 95       	lsr	r26
    1542:	8f ef       	ldi	r24, 0xFF	; 255
    1544:	81 1d       	adc	r24, r1
    1546:	81 1d       	adc	r24, r1
    1548:	08 95       	ret

0000154a <__fp_split3>:
    154a:	57 fd       	sbrc	r21, 7
    154c:	90 58       	subi	r25, 0x80	; 128
    154e:	44 0f       	add	r20, r20
    1550:	55 1f       	adc	r21, r21
    1552:	59 f0       	breq	.+22     	; 0x156a <__fp_splitA+0x10>
    1554:	5f 3f       	cpi	r21, 0xFF	; 255
    1556:	71 f0       	breq	.+28     	; 0x1574 <__fp_splitA+0x1a>
    1558:	47 95       	ror	r20

0000155a <__fp_splitA>:
    155a:	88 0f       	add	r24, r24
    155c:	97 fb       	bst	r25, 7
    155e:	99 1f       	adc	r25, r25
    1560:	61 f0       	breq	.+24     	; 0x157a <__fp_splitA+0x20>
    1562:	9f 3f       	cpi	r25, 0xFF	; 255
    1564:	79 f0       	breq	.+30     	; 0x1584 <__fp_splitA+0x2a>
    1566:	87 95       	ror	r24
    1568:	08 95       	ret
    156a:	12 16       	cp	r1, r18
    156c:	13 06       	cpc	r1, r19
    156e:	14 06       	cpc	r1, r20
    1570:	55 1f       	adc	r21, r21
    1572:	f2 cf       	rjmp	.-28     	; 0x1558 <__fp_split3+0xe>
    1574:	46 95       	lsr	r20
    1576:	f1 df       	rcall	.-30     	; 0x155a <__fp_splitA>
    1578:	08 c0       	rjmp	.+16     	; 0x158a <__fp_splitA+0x30>
    157a:	16 16       	cp	r1, r22
    157c:	17 06       	cpc	r1, r23
    157e:	18 06       	cpc	r1, r24
    1580:	99 1f       	adc	r25, r25
    1582:	f1 cf       	rjmp	.-30     	; 0x1566 <__fp_splitA+0xc>
    1584:	86 95       	lsr	r24
    1586:	71 05       	cpc	r23, r1
    1588:	61 05       	cpc	r22, r1
    158a:	08 94       	sec
    158c:	08 95       	ret

0000158e <__fp_zero>:
    158e:	e8 94       	clt

00001590 <__fp_szero>:
    1590:	bb 27       	eor	r27, r27
    1592:	66 27       	eor	r22, r22
    1594:	77 27       	eor	r23, r23
    1596:	cb 01       	movw	r24, r22
    1598:	97 f9       	bld	r25, 7
    159a:	08 95       	ret

0000159c <__gesf2>:
    159c:	0e 94 81 0a 	call	0x1502	; 0x1502 <__fp_cmp>
    15a0:	08 f4       	brcc	.+2      	; 0x15a4 <__gesf2+0x8>
    15a2:	8f ef       	ldi	r24, 0xFF	; 255
    15a4:	08 95       	ret

000015a6 <__mulsf3>:
    15a6:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__mulsf3x>
    15aa:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <__fp_round>
    15ae:	0e 94 49 0b 	call	0x1692	; 0x1692 <__fp_pscA>
    15b2:	38 f0       	brcs	.+14     	; 0x15c2 <__mulsf3+0x1c>
    15b4:	0e 94 50 0b 	call	0x16a0	; 0x16a0 <__fp_pscB>
    15b8:	20 f0       	brcs	.+8      	; 0x15c2 <__mulsf3+0x1c>
    15ba:	95 23       	and	r25, r21
    15bc:	11 f0       	breq	.+4      	; 0x15c2 <__mulsf3+0x1c>
    15be:	0c 94 40 0b 	jmp	0x1680	; 0x1680 <__fp_inf>
    15c2:	0c 94 46 0b 	jmp	0x168c	; 0x168c <__fp_nan>
    15c6:	11 24       	eor	r1, r1
    15c8:	0c 94 c8 0a 	jmp	0x1590	; 0x1590 <__fp_szero>

000015cc <__mulsf3x>:
    15cc:	0e 94 a5 0a 	call	0x154a	; 0x154a <__fp_split3>
    15d0:	70 f3       	brcs	.-36     	; 0x15ae <__mulsf3+0x8>

000015d2 <__mulsf3_pse>:
    15d2:	95 9f       	mul	r25, r21
    15d4:	c1 f3       	breq	.-16     	; 0x15c6 <__mulsf3+0x20>
    15d6:	95 0f       	add	r25, r21
    15d8:	50 e0       	ldi	r21, 0x00	; 0
    15da:	55 1f       	adc	r21, r21
    15dc:	62 9f       	mul	r22, r18
    15de:	f0 01       	movw	r30, r0
    15e0:	72 9f       	mul	r23, r18
    15e2:	bb 27       	eor	r27, r27
    15e4:	f0 0d       	add	r31, r0
    15e6:	b1 1d       	adc	r27, r1
    15e8:	63 9f       	mul	r22, r19
    15ea:	aa 27       	eor	r26, r26
    15ec:	f0 0d       	add	r31, r0
    15ee:	b1 1d       	adc	r27, r1
    15f0:	aa 1f       	adc	r26, r26
    15f2:	64 9f       	mul	r22, r20
    15f4:	66 27       	eor	r22, r22
    15f6:	b0 0d       	add	r27, r0
    15f8:	a1 1d       	adc	r26, r1
    15fa:	66 1f       	adc	r22, r22
    15fc:	82 9f       	mul	r24, r18
    15fe:	22 27       	eor	r18, r18
    1600:	b0 0d       	add	r27, r0
    1602:	a1 1d       	adc	r26, r1
    1604:	62 1f       	adc	r22, r18
    1606:	73 9f       	mul	r23, r19
    1608:	b0 0d       	add	r27, r0
    160a:	a1 1d       	adc	r26, r1
    160c:	62 1f       	adc	r22, r18
    160e:	83 9f       	mul	r24, r19
    1610:	a0 0d       	add	r26, r0
    1612:	61 1d       	adc	r22, r1
    1614:	22 1f       	adc	r18, r18
    1616:	74 9f       	mul	r23, r20
    1618:	33 27       	eor	r19, r19
    161a:	a0 0d       	add	r26, r0
    161c:	61 1d       	adc	r22, r1
    161e:	23 1f       	adc	r18, r19
    1620:	84 9f       	mul	r24, r20
    1622:	60 0d       	add	r22, r0
    1624:	21 1d       	adc	r18, r1
    1626:	82 2f       	mov	r24, r18
    1628:	76 2f       	mov	r23, r22
    162a:	6a 2f       	mov	r22, r26
    162c:	11 24       	eor	r1, r1
    162e:	9f 57       	subi	r25, 0x7F	; 127
    1630:	50 40       	sbci	r21, 0x00	; 0
    1632:	9a f0       	brmi	.+38     	; 0x165a <__mulsf3_pse+0x88>
    1634:	f1 f0       	breq	.+60     	; 0x1672 <__mulsf3_pse+0xa0>
    1636:	88 23       	and	r24, r24
    1638:	4a f0       	brmi	.+18     	; 0x164c <__mulsf3_pse+0x7a>
    163a:	ee 0f       	add	r30, r30
    163c:	ff 1f       	adc	r31, r31
    163e:	bb 1f       	adc	r27, r27
    1640:	66 1f       	adc	r22, r22
    1642:	77 1f       	adc	r23, r23
    1644:	88 1f       	adc	r24, r24
    1646:	91 50       	subi	r25, 0x01	; 1
    1648:	50 40       	sbci	r21, 0x00	; 0
    164a:	a9 f7       	brne	.-22     	; 0x1636 <__mulsf3_pse+0x64>
    164c:	9e 3f       	cpi	r25, 0xFE	; 254
    164e:	51 05       	cpc	r21, r1
    1650:	80 f0       	brcs	.+32     	; 0x1672 <__mulsf3_pse+0xa0>
    1652:	0c 94 40 0b 	jmp	0x1680	; 0x1680 <__fp_inf>
    1656:	0c 94 c8 0a 	jmp	0x1590	; 0x1590 <__fp_szero>
    165a:	5f 3f       	cpi	r21, 0xFF	; 255
    165c:	e4 f3       	brlt	.-8      	; 0x1656 <__mulsf3_pse+0x84>
    165e:	98 3e       	cpi	r25, 0xE8	; 232
    1660:	d4 f3       	brlt	.-12     	; 0x1656 <__mulsf3_pse+0x84>
    1662:	86 95       	lsr	r24
    1664:	77 95       	ror	r23
    1666:	67 95       	ror	r22
    1668:	b7 95       	ror	r27
    166a:	f7 95       	ror	r31
    166c:	e7 95       	ror	r30
    166e:	9f 5f       	subi	r25, 0xFF	; 255
    1670:	c1 f7       	brne	.-16     	; 0x1662 <__mulsf3_pse+0x90>
    1672:	fe 2b       	or	r31, r30
    1674:	88 0f       	add	r24, r24
    1676:	91 1d       	adc	r25, r1
    1678:	96 95       	lsr	r25
    167a:	87 95       	ror	r24
    167c:	97 f9       	bld	r25, 7
    167e:	08 95       	ret

00001680 <__fp_inf>:
    1680:	97 f9       	bld	r25, 7
    1682:	9f 67       	ori	r25, 0x7F	; 127
    1684:	80 e8       	ldi	r24, 0x80	; 128
    1686:	70 e0       	ldi	r23, 0x00	; 0
    1688:	60 e0       	ldi	r22, 0x00	; 0
    168a:	08 95       	ret

0000168c <__fp_nan>:
    168c:	9f ef       	ldi	r25, 0xFF	; 255
    168e:	80 ec       	ldi	r24, 0xC0	; 192
    1690:	08 95       	ret

00001692 <__fp_pscA>:
    1692:	00 24       	eor	r0, r0
    1694:	0a 94       	dec	r0
    1696:	16 16       	cp	r1, r22
    1698:	17 06       	cpc	r1, r23
    169a:	18 06       	cpc	r1, r24
    169c:	09 06       	cpc	r0, r25
    169e:	08 95       	ret

000016a0 <__fp_pscB>:
    16a0:	00 24       	eor	r0, r0
    16a2:	0a 94       	dec	r0
    16a4:	12 16       	cp	r1, r18
    16a6:	13 06       	cpc	r1, r19
    16a8:	14 06       	cpc	r1, r20
    16aa:	05 06       	cpc	r0, r21
    16ac:	08 95       	ret

000016ae <__fp_round>:
    16ae:	09 2e       	mov	r0, r25
    16b0:	03 94       	inc	r0
    16b2:	00 0c       	add	r0, r0
    16b4:	11 f4       	brne	.+4      	; 0x16ba <__fp_round+0xc>
    16b6:	88 23       	and	r24, r24
    16b8:	52 f0       	brmi	.+20     	; 0x16ce <__fp_round+0x20>
    16ba:	bb 0f       	add	r27, r27
    16bc:	40 f4       	brcc	.+16     	; 0x16ce <__fp_round+0x20>
    16be:	bf 2b       	or	r27, r31
    16c0:	11 f4       	brne	.+4      	; 0x16c6 <__fp_round+0x18>
    16c2:	60 ff       	sbrs	r22, 0
    16c4:	04 c0       	rjmp	.+8      	; 0x16ce <__fp_round+0x20>
    16c6:	6f 5f       	subi	r22, 0xFF	; 255
    16c8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ca:	8f 4f       	sbci	r24, 0xFF	; 255
    16cc:	9f 4f       	sbci	r25, 0xFF	; 255
    16ce:	08 95       	ret

000016d0 <itoa>:
    16d0:	45 32       	cpi	r20, 0x25	; 37
    16d2:	51 05       	cpc	r21, r1
    16d4:	20 f4       	brcc	.+8      	; 0x16de <itoa+0xe>
    16d6:	42 30       	cpi	r20, 0x02	; 2
    16d8:	10 f0       	brcs	.+4      	; 0x16de <itoa+0xe>
    16da:	0c 94 73 0b 	jmp	0x16e6	; 0x16e6 <__itoa_ncheck>
    16de:	fb 01       	movw	r30, r22
    16e0:	10 82       	st	Z, r1
    16e2:	cb 01       	movw	r24, r22
    16e4:	08 95       	ret

000016e6 <__itoa_ncheck>:
    16e6:	bb 27       	eor	r27, r27
    16e8:	4a 30       	cpi	r20, 0x0A	; 10
    16ea:	31 f4       	brne	.+12     	; 0x16f8 <__itoa_ncheck+0x12>
    16ec:	99 23       	and	r25, r25
    16ee:	22 f4       	brpl	.+8      	; 0x16f8 <__itoa_ncheck+0x12>
    16f0:	bd e2       	ldi	r27, 0x2D	; 45
    16f2:	90 95       	com	r25
    16f4:	81 95       	neg	r24
    16f6:	9f 4f       	sbci	r25, 0xFF	; 255
    16f8:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <__utoa_common>

000016fc <__utoa_ncheck>:
    16fc:	bb 27       	eor	r27, r27

000016fe <__utoa_common>:
    16fe:	fb 01       	movw	r30, r22
    1700:	55 27       	eor	r21, r21
    1702:	aa 27       	eor	r26, r26
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	aa 1f       	adc	r26, r26
    170a:	a4 17       	cp	r26, r20
    170c:	10 f0       	brcs	.+4      	; 0x1712 <__utoa_common+0x14>
    170e:	a4 1b       	sub	r26, r20
    1710:	83 95       	inc	r24
    1712:	50 51       	subi	r21, 0x10	; 16
    1714:	b9 f7       	brne	.-18     	; 0x1704 <__utoa_common+0x6>
    1716:	a0 5d       	subi	r26, 0xD0	; 208
    1718:	aa 33       	cpi	r26, 0x3A	; 58
    171a:	08 f0       	brcs	.+2      	; 0x171e <__utoa_common+0x20>
    171c:	a9 5d       	subi	r26, 0xD9	; 217
    171e:	a1 93       	st	Z+, r26
    1720:	00 97       	sbiw	r24, 0x00	; 0
    1722:	79 f7       	brne	.-34     	; 0x1702 <__utoa_common+0x4>
    1724:	b1 11       	cpse	r27, r1
    1726:	b1 93       	st	Z+, r27
    1728:	11 92       	st	Z+, r1
    172a:	cb 01       	movw	r24, r22
    172c:	0c 94 98 0b 	jmp	0x1730	; 0x1730 <strrev>

00001730 <strrev>:
    1730:	dc 01       	movw	r26, r24
    1732:	fc 01       	movw	r30, r24
    1734:	67 2f       	mov	r22, r23
    1736:	71 91       	ld	r23, Z+
    1738:	77 23       	and	r23, r23
    173a:	e1 f7       	brne	.-8      	; 0x1734 <strrev+0x4>
    173c:	32 97       	sbiw	r30, 0x02	; 2
    173e:	04 c0       	rjmp	.+8      	; 0x1748 <strrev+0x18>
    1740:	7c 91       	ld	r23, X
    1742:	6d 93       	st	X+, r22
    1744:	70 83       	st	Z, r23
    1746:	62 91       	ld	r22, -Z
    1748:	ae 17       	cp	r26, r30
    174a:	bf 07       	cpc	r27, r31
    174c:	c8 f3       	brcs	.-14     	; 0x1740 <strrev+0x10>
    174e:	08 95       	ret

00001750 <_exit>:
    1750:	f8 94       	cli

00001752 <__stop_program>:
    1752:	ff cf       	rjmp	.-2      	; 0x1752 <__stop_program>
